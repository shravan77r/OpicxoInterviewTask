/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:33
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using SSXImport.Data.Interfaces;

namespace SSXImport.Data
{
	public partial class DLDataTransfer : SSXImport_BaseData
	{
		#region member variables
		protected Int32? _dataTransferId;
		protected string _dataTransferGUID;
		protected Int32? _templateId;
		protected Int32? _originSourceTypeId;
		protected Int32? _originSourceAPITemplateId;
		protected Int32? _originSourceFileTypeId;
		protected string _originSourceServer;
		protected string _originSourcePort;
		protected string _originSourceUsername;
		protected string _originSourcePassword;
		protected string _originSourceDatabase;
		protected string _originSourceFilePath;
		protected string _originSourceFileName;
		protected bool? _isFirstColumnContainHeader;
		protected Int32? _targetSourceTypeId;
		protected Int32? _targetSourceAPITemplateId;
		protected string _targetSourceServer;
		protected string _targetSourcePort;
		protected string _targetSourceUsername;
		protected string _targetSourcePassword;
		protected string _targetSourceDatabase;
		protected DateTime? _transferDate;
		protected Int32? _transferStatus;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		#endregion

		#region class methods
		public DLDataTransfer()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table DataTransfer based on the primary key(s)
		///</Summary>
		///<returns>
		///DLDataTransfer
		///</returns>
		///<parameters>
		///Int32? dataTransferId
		///</parameters>
		public static DLDataTransfer SelectOne(Int32? dataTransferId)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("DataTransfer");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)dataTransferId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLDataTransfer retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLDataTransfer();
					retObj._dataTransferId					 = Convert.IsDBNull(dt.Rows[0]["DataTransferId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DataTransferId"];
					retObj._dataTransferGUID					 = Convert.IsDBNull(dt.Rows[0]["DataTransferGUID"]) ? null : (string)dt.Rows[0]["DataTransferGUID"];
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._originSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceTypeId"];
					retObj._originSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceAPITemplateId"];
					retObj._originSourceFileTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceFileTypeId"];
					retObj._originSourceServer					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceServer"]) ? null : (string)dt.Rows[0]["OriginSourceServer"];
					retObj._originSourcePort					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePort"]) ? null : (string)dt.Rows[0]["OriginSourcePort"];
					retObj._originSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceUsername"]) ? null : (string)dt.Rows[0]["OriginSourceUsername"];
					retObj._originSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePassword"]) ? null : (string)dt.Rows[0]["OriginSourcePassword"];
					retObj._originSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceDatabase"]) ? null : (string)dt.Rows[0]["OriginSourceDatabase"];
					retObj._originSourceFilePath					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFilePath"]) ? null : (string)dt.Rows[0]["OriginSourceFilePath"];
					retObj._originSourceFileName					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileName"]) ? null : (string)dt.Rows[0]["OriginSourceFileName"];
					retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(dt.Rows[0]["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFirstColumnContainHeader"]);
					retObj._targetSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceTypeId"];
					retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceAPITemplateId"];
					retObj._targetSourceServer					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceServer"]) ? null : (string)dt.Rows[0]["TargetSourceServer"];
					retObj._targetSourcePort					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePort"]) ? null : (string)dt.Rows[0]["TargetSourcePort"];
					retObj._targetSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceUsername"]) ? null : (string)dt.Rows[0]["TargetSourceUsername"];
					retObj._targetSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePassword"]) ? null : (string)dt.Rows[0]["TargetSourcePassword"];
					retObj._targetSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceDatabase"]) ? null : (string)dt.Rows[0]["TargetSourceDatabase"];
					retObj._transferDate					 = Convert.IsDBNull(dt.Rows[0]["TransferDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TransferDate"];
					retObj._transferStatus					 = Convert.IsDBNull(dt.Rows[0]["TransferStatus"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TransferStatus"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table DataTransfer based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_dataTransferId?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table DataTransfer based on a unique constraint
		///</Summary>
		///<returns>
		///DLDataTransfer
		///</returns>
		///<parameters>
		///string dataTransferGUID
		///</parameters>
		public static DLDataTransfer SelectOneByDataTransferGUID(string dataTransferGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getonebydatatransferguid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("DataTransfer");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)dataTransferGUID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLDataTransfer retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLDataTransfer();
					retObj._dataTransferId					 = Convert.IsDBNull(dt.Rows[0]["DataTransferId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DataTransferId"];
					retObj._dataTransferGUID					 = Convert.IsDBNull(dt.Rows[0]["DataTransferGUID"]) ? null : (string)dt.Rows[0]["DataTransferGUID"];
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._originSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceTypeId"];
					retObj._originSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceAPITemplateId"];
					retObj._originSourceFileTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceFileTypeId"];
					retObj._originSourceServer					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceServer"]) ? null : (string)dt.Rows[0]["OriginSourceServer"];
					retObj._originSourcePort					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePort"]) ? null : (string)dt.Rows[0]["OriginSourcePort"];
					retObj._originSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceUsername"]) ? null : (string)dt.Rows[0]["OriginSourceUsername"];
					retObj._originSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePassword"]) ? null : (string)dt.Rows[0]["OriginSourcePassword"];
					retObj._originSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceDatabase"]) ? null : (string)dt.Rows[0]["OriginSourceDatabase"];
					retObj._originSourceFilePath					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFilePath"]) ? null : (string)dt.Rows[0]["OriginSourceFilePath"];
					retObj._originSourceFileName					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileName"]) ? null : (string)dt.Rows[0]["OriginSourceFileName"];
					retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(dt.Rows[0]["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFirstColumnContainHeader"]);
					retObj._targetSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceTypeId"];
					retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceAPITemplateId"];
					retObj._targetSourceServer					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceServer"]) ? null : (string)dt.Rows[0]["TargetSourceServer"];
					retObj._targetSourcePort					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePort"]) ? null : (string)dt.Rows[0]["TargetSourcePort"];
					retObj._targetSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceUsername"]) ? null : (string)dt.Rows[0]["TargetSourceUsername"];
					retObj._targetSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePassword"]) ? null : (string)dt.Rows[0]["TargetSourcePassword"];
					retObj._targetSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceDatabase"]) ? null : (string)dt.Rows[0]["TargetSourceDatabase"];
					retObj._transferDate					 = Convert.IsDBNull(dt.Rows[0]["TransferDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TransferDate"];
					retObj._transferStatus					 = Convert.IsDBNull(dt.Rows[0]["TransferStatus"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TransferStatus"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table DataTransfer based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string dataTransferGUID
		///</parameters>
		public virtual void DeleteOneByDataTransferGUID(string dataTransferGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_deleteonebydatatransferguid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_dataTransferGUID?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table DataTransfer
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERID", MySqlDbType.Int32, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _dataTransferId));
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dataTransferGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceFileTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILEPATH", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFilePath));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILENAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFileName));
				command.Parameters.Add(new MySqlParameter("?P_ISFIRSTCOLUMNCONTAINHEADER", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFirstColumnContainHeader));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_TRANSFERDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _transferDate));
				command.Parameters.Add(new MySqlParameter("?P_TRANSFERSTATUS", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _transferStatus));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_dataTransferId					 = Convert.IsDBNull(command.Parameters["?P_DATATRANSFERID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DATATRANSFERID"].Value;
				_dataTransferGUID					 = Convert.IsDBNull(command.Parameters["?P_DATATRANSFERGUID"].Value) ? null : (string)command.Parameters["?P_DATATRANSFERGUID"].Value;
				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_originSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCETYPEID"].Value;
				_originSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value;
				_originSourceFileTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value;
				_originSourceServer					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCESERVER"].Value;
				_originSourcePort					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPORT"].Value;
				_originSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value;
				_originSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value;
				_originSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEDATABASE"].Value;
				_originSourceFilePath					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value;
				_originSourceFileName					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILENAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILENAME"].Value;
				_isFirstColumnContainHeader					 = Convert.IsDBNull(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value);
				_targetSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCETYPEID"].Value;
				_targetSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value;
				_targetSourceServer					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCESERVER"].Value;
				_targetSourcePort					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPORT"].Value;
				_targetSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEUSERNAME"].Value;
				_targetSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPASSWORD"].Value;
				_targetSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEDATABASE"].Value;
				_transferDate					 = Convert.IsDBNull(command.Parameters["?P_TRANSFERDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_TRANSFERDATE"].Value;
				_transferStatus					 = Convert.IsDBNull(command.Parameters["?P_TRANSFERSTATUS"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TRANSFERSTATUS"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table DataTransfer
		///</Summary>
		///<returns>
		///List-DLDataTransfer.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DLDataTransfer> SelectAll()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("DataTransfer");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLDataTransfer> objList = new List<DLDataTransfer>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLDataTransfer retObj = new DLDataTransfer();
						retObj._dataTransferId					 = Convert.IsDBNull(row["DataTransferId"]) ? (Int32?)null : (Int32?)row["DataTransferId"];
						retObj._dataTransferGUID					 = Convert.IsDBNull(row["DataTransferGUID"]) ? null : (string)row["DataTransferGUID"];
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._originSourceTypeId					 = Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"];
						retObj._originSourceAPITemplateId					 = Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"];
						retObj._originSourceFileTypeId					 = Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"];
						retObj._originSourceServer					 = Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"];
						retObj._originSourcePort					 = Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"];
						retObj._originSourceUsername					 = Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"];
						retObj._originSourcePassword					 = Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"];
						retObj._originSourceDatabase					 = Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"];
						retObj._originSourceFilePath					 = Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"];
						retObj._originSourceFileName					 = Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"];
						retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]);
						retObj._targetSourceTypeId					 = Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"];
						retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"];
						retObj._targetSourceServer					 = Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"];
						retObj._targetSourcePort					 = Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"];
						retObj._targetSourceUsername					 = Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"];
						retObj._targetSourcePassword					 = Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"];
						retObj._targetSourceDatabase					 = Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"];
						retObj._transferDate					 = Convert.IsDBNull(row["TransferDate"]) ? (DateTime?)null : (DateTime?)row["TransferDate"];
						retObj._transferStatus					 = Convert.IsDBNull(row["TransferStatus"]) ? (Int32?)null : (Int32?)row["TransferStatus"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiDataTransfer
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("DataTransfer");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_FIELDSFIELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "DataTransferId", true) == 0) lst.Add(Convert.IsDBNull(row["DataTransferId"]) ? (Int32?)null : (Int32?)row["DataTransferId"]);
						if (string.Compare(projection.Member, "DataTransferGUID", true) == 0) lst.Add(Convert.IsDBNull(row["DataTransferGUID"]) ? null : (string)row["DataTransferGUID"]);
						if (string.Compare(projection.Member, "TemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"]);
						if (string.Compare(projection.Member, "OriginSourceTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"]);
						if (string.Compare(projection.Member, "OriginSourceAPITemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"]);
						if (string.Compare(projection.Member, "OriginSourceFileTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"]);
						if (string.Compare(projection.Member, "OriginSourceServer", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"]);
						if (string.Compare(projection.Member, "OriginSourcePort", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"]);
						if (string.Compare(projection.Member, "OriginSourceUsername", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"]);
						if (string.Compare(projection.Member, "OriginSourcePassword", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"]);
						if (string.Compare(projection.Member, "OriginSourceDatabase", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"]);
						if (string.Compare(projection.Member, "OriginSourceFilePath", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"]);
						if (string.Compare(projection.Member, "OriginSourceFileName", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"]);
						if (string.Compare(projection.Member, "IsFirstColumnContainHeader", true) == 0) lst.Add(Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]));
						if (string.Compare(projection.Member, "TargetSourceTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"]);
						if (string.Compare(projection.Member, "TargetSourceAPITemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"]);
						if (string.Compare(projection.Member, "TargetSourceServer", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"]);
						if (string.Compare(projection.Member, "TargetSourcePort", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"]);
						if (string.Compare(projection.Member, "TargetSourceUsername", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"]);
						if (string.Compare(projection.Member, "TargetSourcePassword", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"]);
						if (string.Compare(projection.Member, "TargetSourceDatabase", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"]);
						if (string.Compare(projection.Member, "TransferDate", true) == 0) lst.Add(Convert.IsDBNull(row["TransferDate"]) ? (DateTime?)null : (DateTime?)row["TransferDate"]);
						if (string.Compare(projection.Member, "TransferStatus", true) == 0) lst.Add(Convert.IsDBNull(row["TransferStatus"]) ? (Int32?)null : (Int32?)row["TransferStatus"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]));
						if (string.Compare(projection.Member, "IsDelete", true) == 0) lst.Add(Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]));
						if (string.Compare(projection.Member, "EnteredBy", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"]);
						if (string.Compare(projection.Member, "EnteredDate", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"]);
						if (string.Compare(projection.Member, "UpdatedBy", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"]);
						if (string.Compare(projection.Member, "UpdatedDate", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api DataTransfer
		///</Summary>
		///<returns>
		///List-DLDataTransfer.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<DLDataTransfer> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("DataTransfer");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLDataTransfer> objList = new List<DLDataTransfer>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLDataTransfer retObj = new DLDataTransfer();
						retObj._dataTransferId					 = Convert.IsDBNull(row["DataTransferId"]) ? (Int32?)null : (Int32?)row["DataTransferId"];
						retObj._dataTransferGUID					 = Convert.IsDBNull(row["DataTransferGUID"]) ? null : (string)row["DataTransferGUID"];
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._originSourceTypeId					 = Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"];
						retObj._originSourceAPITemplateId					 = Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"];
						retObj._originSourceFileTypeId					 = Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"];
						retObj._originSourceServer					 = Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"];
						retObj._originSourcePort					 = Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"];
						retObj._originSourceUsername					 = Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"];
						retObj._originSourcePassword					 = Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"];
						retObj._originSourceDatabase					 = Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"];
						retObj._originSourceFilePath					 = Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"];
						retObj._originSourceFileName					 = Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"];
						retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]);
						retObj._targetSourceTypeId					 = Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"];
						retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"];
						retObj._targetSourceServer					 = Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"];
						retObj._targetSourcePort					 = Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"];
						retObj._targetSourceUsername					 = Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"];
						retObj._targetSourcePassword					 = Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"];
						retObj._targetSourceDatabase					 = Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"];
						retObj._transferDate					 = Convert.IsDBNull(row["TransferDate"]) ? (DateTime?)null : (DateTime?)row["TransferDate"];
						retObj._transferStatus					 = Convert.IsDBNull(row["TransferStatus"]) ? (Int32?)null : (Int32?)row["TransferStatus"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api DataTransfer
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table DataTransfer based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "datatransfer_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dataTransferId));
				command.Parameters.Add(new MySqlParameter("?P_DATATRANSFERGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dataTransferGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceFileTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILEPATH", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFilePath));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILENAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFileName));
				command.Parameters.Add(new MySqlParameter("?P_ISFIRSTCOLUMNCONTAINHEADER", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFirstColumnContainHeader));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_TRANSFERDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _transferDate));
				command.Parameters.Add(new MySqlParameter("?P_TRANSFERSTATUS", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _transferStatus));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_dataTransferId					 = Convert.IsDBNull(command.Parameters["?P_DATATRANSFERID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DATATRANSFERID"].Value;
				_dataTransferGUID					 = Convert.IsDBNull(command.Parameters["?P_DATATRANSFERGUID"].Value) ? null : (string)command.Parameters["?P_DATATRANSFERGUID"].Value;
				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_originSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCETYPEID"].Value;
				_originSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value;
				_originSourceFileTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value;
				_originSourceServer					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCESERVER"].Value;
				_originSourcePort					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPORT"].Value;
				_originSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value;
				_originSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value;
				_originSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEDATABASE"].Value;
				_originSourceFilePath					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value;
				_originSourceFileName					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILENAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILENAME"].Value;
				_isFirstColumnContainHeader					 = Convert.IsDBNull(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value);
				_targetSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCETYPEID"].Value;
				_targetSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value;
				_targetSourceServer					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCESERVER"].Value;
				_targetSourcePort					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPORT"].Value;
				_targetSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEUSERNAME"].Value;
				_targetSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPASSWORD"].Value;
				_targetSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEDATABASE"].Value;
				_transferDate					 = Convert.IsDBNull(command.Parameters["?P_TRANSFERDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_TRANSFERDATE"].Value;
				_transferStatus					 = Convert.IsDBNull(command.Parameters["?P_TRANSFERSTATUS"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TRANSFERSTATUS"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public Int32? DataTransferId
		{
			get
			{
				return _dataTransferId;
			}
			set
			{
				_dataTransferId = value;
			}
		}
		public string DataTransferGUID
		{
			get
			{
				return _dataTransferGUID;
			}
			set
			{
				_dataTransferGUID = value;
			}
		}
		public Int32? TemplateId
		{
			get
			{
				return _templateId;
			}
			set
			{
				_templateId = value;
			}
		}
		public Int32? OriginSourceTypeId
		{
			get
			{
				return _originSourceTypeId;
			}
			set
			{
				_originSourceTypeId = value;
			}
		}
		public Int32? OriginSourceAPITemplateId
		{
			get
			{
				return _originSourceAPITemplateId;
			}
			set
			{
				_originSourceAPITemplateId = value;
			}
		}
		public Int32? OriginSourceFileTypeId
		{
			get
			{
				return _originSourceFileTypeId;
			}
			set
			{
				_originSourceFileTypeId = value;
			}
		}
		public string OriginSourceServer
		{
			get
			{
				return _originSourceServer;
			}
			set
			{
				_originSourceServer = value;
			}
		}
		public string OriginSourcePort
		{
			get
			{
				return _originSourcePort;
			}
			set
			{
				_originSourcePort = value;
			}
		}
		public string OriginSourceUsername
		{
			get
			{
				return _originSourceUsername;
			}
			set
			{
				_originSourceUsername = value;
			}
		}
		public string OriginSourcePassword
		{
			get
			{
				return _originSourcePassword;
			}
			set
			{
				_originSourcePassword = value;
			}
		}
		public string OriginSourceDatabase
		{
			get
			{
				return _originSourceDatabase;
			}
			set
			{
				_originSourceDatabase = value;
			}
		}
		public string OriginSourceFilePath
		{
			get
			{
				return _originSourceFilePath;
			}
			set
			{
				_originSourceFilePath = value;
			}
		}
		public string OriginSourceFileName
		{
			get
			{
				return _originSourceFileName;
			}
			set
			{
				_originSourceFileName = value;
			}
		}
		public bool? IsFirstColumnContainHeader
		{
			get
			{
				return _isFirstColumnContainHeader;
			}
			set
			{
				_isFirstColumnContainHeader = value;
			}
		}
		public Int32? TargetSourceTypeId
		{
			get
			{
				return _targetSourceTypeId;
			}
			set
			{
				_targetSourceTypeId = value;
			}
		}
		public Int32? TargetSourceAPITemplateId
		{
			get
			{
				return _targetSourceAPITemplateId;
			}
			set
			{
				_targetSourceAPITemplateId = value;
			}
		}
		public string TargetSourceServer
		{
			get
			{
				return _targetSourceServer;
			}
			set
			{
				_targetSourceServer = value;
			}
		}
		public string TargetSourcePort
		{
			get
			{
				return _targetSourcePort;
			}
			set
			{
				_targetSourcePort = value;
			}
		}
		public string TargetSourceUsername
		{
			get
			{
				return _targetSourceUsername;
			}
			set
			{
				_targetSourceUsername = value;
			}
		}
		public string TargetSourcePassword
		{
			get
			{
				return _targetSourcePassword;
			}
			set
			{
				_targetSourcePassword = value;
			}
		}
		public string TargetSourceDatabase
		{
			get
			{
				return _targetSourceDatabase;
			}
			set
			{
				_targetSourceDatabase = value;
			}
		}
		public DateTime? TransferDate
		{
			get
			{
				return _transferDate;
			}
			set
			{
				_transferDate = value;
			}
		}
		public Int32? TransferStatus
		{
			get
			{
				return _transferStatus;
			}
			set
			{
				_transferStatus = value;
			}
		}
		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}
		public bool? IsDelete
		{
			get
			{
				return _isDelete;
			}
			set
			{
				_isDelete = value;
			}
		}
		public Int32? EnteredBy
		{
			get
			{
				return _enteredBy;
			}
			set
			{
				_enteredBy = value;
			}
		}
		public DateTime? EnteredDate
		{
			get
			{
				return _enteredDate;
			}
			set
			{
				_enteredDate = value;
			}
		}
		public Int32? UpdatedBy
		{
			get
			{
				return _updatedBy;
			}
			set
			{
				_updatedBy = value;
			}
		}
		public DateTime? UpdatedDate
		{
			get
			{
				return _updatedDate;
			}
			set
			{
				_updatedDate = value;
			}
		}
		#endregion
	}
}
