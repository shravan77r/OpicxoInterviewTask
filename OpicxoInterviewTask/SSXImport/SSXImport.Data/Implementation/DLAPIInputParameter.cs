/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:33
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using SSXImport.Data.Interfaces;

namespace SSXImport.Data
{
	public partial class DLAPIInputParameter : SSXImport_BaseData
	{
		#region member variables
		protected Int32? _inputParameterId;
		protected string _inputParameterGUID;
		protected Int32? _aPIId;
		protected Int32? _inputParameterTypeId;
		protected string _keyColumn;
		protected string _valueColumn;
		protected Int32? _bodyType;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		#endregion

		#region class methods
		public DLAPIInputParameter()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table APIInputParameter based on the primary key(s)
		///</Summary>
		///<returns>
		///DLAPIInputParameter
		///</returns>
		///<parameters>
		///Int32? inputParameterId
		///</parameters>
		public static DLAPIInputParameter SelectOne(Int32? inputParameterId)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("APIInputParameter");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)inputParameterId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLAPIInputParameter retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLAPIInputParameter();
					retObj._inputParameterId					 = Convert.IsDBNull(dt.Rows[0]["InputParameterId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterId"];
					retObj._inputParameterGUID					 = Convert.IsDBNull(dt.Rows[0]["InputParameterGUID"]) ? null : (string)dt.Rows[0]["InputParameterGUID"];
					retObj._aPIId					 = Convert.IsDBNull(dt.Rows[0]["APIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["APIId"];
					retObj._inputParameterTypeId					 = Convert.IsDBNull(dt.Rows[0]["InputParameterTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterTypeId"];
					retObj._keyColumn					 = Convert.IsDBNull(dt.Rows[0]["KeyColumn"]) ? null : (string)dt.Rows[0]["KeyColumn"];
					retObj._valueColumn					 = Convert.IsDBNull(dt.Rows[0]["ValueColumn"]) ? null : (string)dt.Rows[0]["ValueColumn"];
					retObj._bodyType					 = Convert.IsDBNull(dt.Rows[0]["BodyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BodyType"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table APIInputParameter based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_inputParameterId?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table APIInputParameter based on a unique constraint
		///</Summary>
		///<returns>
		///DLAPIInputParameter
		///</returns>
		///<parameters>
		///string inputParameterGUID
		///</parameters>
		public static DLAPIInputParameter SelectOneByInputParameterGUID(string inputParameterGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getonebyinputparameterguid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("APIInputParameter");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERGUID", MySqlDbType.VarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)inputParameterGUID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLAPIInputParameter retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLAPIInputParameter();
					retObj._inputParameterId					 = Convert.IsDBNull(dt.Rows[0]["InputParameterId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterId"];
					retObj._inputParameterGUID					 = Convert.IsDBNull(dt.Rows[0]["InputParameterGUID"]) ? null : (string)dt.Rows[0]["InputParameterGUID"];
					retObj._aPIId					 = Convert.IsDBNull(dt.Rows[0]["APIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["APIId"];
					retObj._inputParameterTypeId					 = Convert.IsDBNull(dt.Rows[0]["InputParameterTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterTypeId"];
					retObj._keyColumn					 = Convert.IsDBNull(dt.Rows[0]["KeyColumn"]) ? null : (string)dt.Rows[0]["KeyColumn"];
					retObj._valueColumn					 = Convert.IsDBNull(dt.Rows[0]["ValueColumn"]) ? null : (string)dt.Rows[0]["ValueColumn"];
					retObj._bodyType					 = Convert.IsDBNull(dt.Rows[0]["BodyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BodyType"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table APIInputParameter based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string inputParameterGUID
		///</parameters>
		public virtual void DeleteOneByInputParameterGUID(string inputParameterGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_deleteonebyinputparameterguid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERGUID", MySqlDbType.VarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_inputParameterGUID?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table APIInputParameter
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERID", MySqlDbType.Int32, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterId));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERGUID", MySqlDbType.VarChar, 250, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _inputParameterGUID));
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _aPIId));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERTYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterTypeId));
				command.Parameters.Add(new MySqlParameter("?P_KEYCOLUMN", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _keyColumn));
				command.Parameters.Add(new MySqlParameter("?P_VALUECOLUMN", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _valueColumn));
				command.Parameters.Add(new MySqlParameter("?P_BODYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _bodyType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_inputParameterId					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERID"].Value;
				_inputParameterGUID					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERGUID"].Value) ? null : (string)command.Parameters["?P_INPUTPARAMETERGUID"].Value;
				_aPIId					 = Convert.IsDBNull(command.Parameters["?P_APIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_APIID"].Value;
				_inputParameterTypeId					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERTYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERTYPEID"].Value;
				_keyColumn					 = Convert.IsDBNull(command.Parameters["?P_KEYCOLUMN"].Value) ? null : (string)command.Parameters["?P_KEYCOLUMN"].Value;
				_valueColumn					 = Convert.IsDBNull(command.Parameters["?P_VALUECOLUMN"].Value) ? null : (string)command.Parameters["?P_VALUECOLUMN"].Value;
				_bodyType					 = Convert.IsDBNull(command.Parameters["?P_BODYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_BODYTYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table APIInputParameter
		///</Summary>
		///<returns>
		///List-DLAPIInputParameter.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DLAPIInputParameter> SelectAll()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("APIInputParameter");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLAPIInputParameter> objList = new List<DLAPIInputParameter>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLAPIInputParameter retObj = new DLAPIInputParameter();
						retObj._inputParameterId					 = Convert.IsDBNull(row["InputParameterId"]) ? (Int32?)null : (Int32?)row["InputParameterId"];
						retObj._inputParameterGUID					 = Convert.IsDBNull(row["InputParameterGUID"]) ? null : (string)row["InputParameterGUID"];
						retObj._aPIId					 = Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"];
						retObj._inputParameterTypeId					 = Convert.IsDBNull(row["InputParameterTypeId"]) ? (Int32?)null : (Int32?)row["InputParameterTypeId"];
						retObj._keyColumn					 = Convert.IsDBNull(row["KeyColumn"]) ? null : (string)row["KeyColumn"];
						retObj._valueColumn					 = Convert.IsDBNull(row["ValueColumn"]) ? null : (string)row["ValueColumn"];
						retObj._bodyType					 = Convert.IsDBNull(row["BodyType"]) ? (Int32?)null : (Int32?)row["BodyType"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAPIInputParameter
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("APIInputParameter");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_FIELDSFIELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "InputParameterId", true) == 0) lst.Add(Convert.IsDBNull(row["InputParameterId"]) ? (Int32?)null : (Int32?)row["InputParameterId"]);
						if (string.Compare(projection.Member, "InputParameterGUID", true) == 0) lst.Add(Convert.IsDBNull(row["InputParameterGUID"]) ? null : (string)row["InputParameterGUID"]);
						if (string.Compare(projection.Member, "APIId", true) == 0) lst.Add(Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"]);
						if (string.Compare(projection.Member, "InputParameterTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["InputParameterTypeId"]) ? (Int32?)null : (Int32?)row["InputParameterTypeId"]);
						if (string.Compare(projection.Member, "KeyColumn", true) == 0) lst.Add(Convert.IsDBNull(row["KeyColumn"]) ? null : (string)row["KeyColumn"]);
						if (string.Compare(projection.Member, "ValueColumn", true) == 0) lst.Add(Convert.IsDBNull(row["ValueColumn"]) ? null : (string)row["ValueColumn"]);
						if (string.Compare(projection.Member, "BodyType", true) == 0) lst.Add(Convert.IsDBNull(row["BodyType"]) ? (Int32?)null : (Int32?)row["BodyType"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]));
						if (string.Compare(projection.Member, "IsDelete", true) == 0) lst.Add(Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]));
						if (string.Compare(projection.Member, "EnteredBy", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"]);
						if (string.Compare(projection.Member, "EnteredDate", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"]);
						if (string.Compare(projection.Member, "UpdatedBy", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"]);
						if (string.Compare(projection.Member, "UpdatedDate", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api APIInputParameter
		///</Summary>
		///<returns>
		///List-DLAPIInputParameter.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<DLAPIInputParameter> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("APIInputParameter");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLAPIInputParameter> objList = new List<DLAPIInputParameter>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLAPIInputParameter retObj = new DLAPIInputParameter();
						retObj._inputParameterId					 = Convert.IsDBNull(row["InputParameterId"]) ? (Int32?)null : (Int32?)row["InputParameterId"];
						retObj._inputParameterGUID					 = Convert.IsDBNull(row["InputParameterGUID"]) ? null : (string)row["InputParameterGUID"];
						retObj._aPIId					 = Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"];
						retObj._inputParameterTypeId					 = Convert.IsDBNull(row["InputParameterTypeId"]) ? (Int32?)null : (Int32?)row["InputParameterTypeId"];
						retObj._keyColumn					 = Convert.IsDBNull(row["KeyColumn"]) ? null : (string)row["KeyColumn"];
						retObj._valueColumn					 = Convert.IsDBNull(row["ValueColumn"]) ? null : (string)row["ValueColumn"];
						retObj._bodyType					 = Convert.IsDBNull(row["BodyType"]) ? (Int32?)null : (Int32?)row["BodyType"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api APIInputParameter
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table APIInputParameter based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "apiinputparameter_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterId));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERGUID", MySqlDbType.VarChar, 250, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _inputParameterGUID));
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _aPIId));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERTYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterTypeId));
				command.Parameters.Add(new MySqlParameter("?P_KEYCOLUMN", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _keyColumn));
				command.Parameters.Add(new MySqlParameter("?P_VALUECOLUMN", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _valueColumn));
				command.Parameters.Add(new MySqlParameter("?P_BODYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _bodyType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_inputParameterId					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERID"].Value;
				_inputParameterGUID					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERGUID"].Value) ? null : (string)command.Parameters["?P_INPUTPARAMETERGUID"].Value;
				_aPIId					 = Convert.IsDBNull(command.Parameters["?P_APIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_APIID"].Value;
				_inputParameterTypeId					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERTYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERTYPEID"].Value;
				_keyColumn					 = Convert.IsDBNull(command.Parameters["?P_KEYCOLUMN"].Value) ? null : (string)command.Parameters["?P_KEYCOLUMN"].Value;
				_valueColumn					 = Convert.IsDBNull(command.Parameters["?P_VALUECOLUMN"].Value) ? null : (string)command.Parameters["?P_VALUECOLUMN"].Value;
				_bodyType					 = Convert.IsDBNull(command.Parameters["?P_BODYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_BODYTYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public Int32? InputParameterId
		{
			get
			{
				return _inputParameterId;
			}
			set
			{
				_inputParameterId = value;
			}
		}
		public string InputParameterGUID
		{
			get
			{
				return _inputParameterGUID;
			}
			set
			{
				_inputParameterGUID = value;
			}
		}
		public Int32? APIId
		{
			get
			{
				return _aPIId;
			}
			set
			{
				_aPIId = value;
			}
		}
		public Int32? InputParameterTypeId
		{
			get
			{
				return _inputParameterTypeId;
			}
			set
			{
				_inputParameterTypeId = value;
			}
		}
		public string KeyColumn
		{
			get
			{
				return _keyColumn;
			}
			set
			{
				_keyColumn = value;
			}
		}
		public string ValueColumn
		{
			get
			{
				return _valueColumn;
			}
			set
			{
				_valueColumn = value;
			}
		}
		public Int32? BodyType
		{
			get
			{
				return _bodyType;
			}
			set
			{
				_bodyType = value;
			}
		}
		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}
		public bool? IsDelete
		{
			get
			{
				return _isDelete;
			}
			set
			{
				_isDelete = value;
			}
		}
		public Int32? EnteredBy
		{
			get
			{
				return _enteredBy;
			}
			set
			{
				_enteredBy = value;
			}
		}
		public DateTime? EnteredDate
		{
			get
			{
				return _enteredDate;
			}
			set
			{
				_enteredDate = value;
			}
		}
		public Int32? UpdatedBy
		{
			get
			{
				return _updatedBy;
			}
			set
			{
				_updatedBy = value;
			}
		}
		public DateTime? UpdatedDate
		{
			get
			{
				return _updatedDate;
			}
			set
			{
				_updatedDate = value;
			}
		}
		#endregion
	}
}
