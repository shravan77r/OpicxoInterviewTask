/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using SSXImport.Data.Interfaces;

namespace SSXImport.Data
{
	public partial class DLTemplateColumnDetail : SSXImport_BaseData
	{
		#region member variables
		protected Int32? _templateColumnDetailId;
		protected string _templateColumnDetailGUID;
		protected Int32? _templateId;
		protected Int32? _templateTableDetailId;
		protected string _sourceColumn;
		protected string _sourceDependentColumn;
		protected string _sourceColumnDataType;
		protected bool? _isUniqueColumn;
		protected string _targetColumn;
		protected string _targetColumnDataType;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		#endregion

		#region class methods
		public DLTemplateColumnDetail()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table TemplateColumnDetail based on the primary key(s)
		///</Summary>
		///<returns>
		///DLTemplateColumnDetail
		///</returns>
		///<parameters>
		///Int32? templateColumnDetailId
		///</parameters>
		public static DLTemplateColumnDetail SelectOne(Int32? templateColumnDetailId)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TemplateColumnDetail");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)templateColumnDetailId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLTemplateColumnDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLTemplateColumnDetail();
					retObj._templateColumnDetailId					 = Convert.IsDBNull(dt.Rows[0]["TemplateColumnDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateColumnDetailId"];
					retObj._templateColumnDetailGUID					 = Convert.IsDBNull(dt.Rows[0]["TemplateColumnDetailGUID"]) ? null : (string)dt.Rows[0]["TemplateColumnDetailGUID"];
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._templateTableDetailId					 = Convert.IsDBNull(dt.Rows[0]["TemplateTableDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateTableDetailId"];
					retObj._sourceColumn					 = Convert.IsDBNull(dt.Rows[0]["SourceColumn"]) ? null : (string)dt.Rows[0]["SourceColumn"];
					retObj._sourceDependentColumn					 = Convert.IsDBNull(dt.Rows[0]["SourceDependentColumn"]) ? null : (string)dt.Rows[0]["SourceDependentColumn"];
					retObj._sourceColumnDataType					 = Convert.IsDBNull(dt.Rows[0]["SourceColumnDataType"]) ? null : (string)dt.Rows[0]["SourceColumnDataType"];
					retObj._isUniqueColumn					 = Convert.IsDBNull(dt.Rows[0]["IsUniqueColumn"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsUniqueColumn"]);
					retObj._targetColumn					 = Convert.IsDBNull(dt.Rows[0]["TargetColumn"]) ? null : (string)dt.Rows[0]["TargetColumn"];
					retObj._targetColumnDataType					 = Convert.IsDBNull(dt.Rows[0]["TargetColumnDataType"]) ? null : (string)dt.Rows[0]["TargetColumnDataType"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table TemplateColumnDetail based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_templateColumnDetailId?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table TemplateColumnDetail based on a unique constraint
		///</Summary>
		///<returns>
		///DLTemplateColumnDetail
		///</returns>
		///<parameters>
		///string templateColumnDetailGUID
		///</parameters>
		public static DLTemplateColumnDetail SelectOneByTemplateColumnDetailGUID(string templateColumnDetailGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getonebytemplatecolumndetailguid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TemplateColumnDetail");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)templateColumnDetailGUID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLTemplateColumnDetail retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLTemplateColumnDetail();
					retObj._templateColumnDetailId					 = Convert.IsDBNull(dt.Rows[0]["TemplateColumnDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateColumnDetailId"];
					retObj._templateColumnDetailGUID					 = Convert.IsDBNull(dt.Rows[0]["TemplateColumnDetailGUID"]) ? null : (string)dt.Rows[0]["TemplateColumnDetailGUID"];
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._templateTableDetailId					 = Convert.IsDBNull(dt.Rows[0]["TemplateTableDetailId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateTableDetailId"];
					retObj._sourceColumn					 = Convert.IsDBNull(dt.Rows[0]["SourceColumn"]) ? null : (string)dt.Rows[0]["SourceColumn"];
					retObj._sourceDependentColumn					 = Convert.IsDBNull(dt.Rows[0]["SourceDependentColumn"]) ? null : (string)dt.Rows[0]["SourceDependentColumn"];
					retObj._sourceColumnDataType					 = Convert.IsDBNull(dt.Rows[0]["SourceColumnDataType"]) ? null : (string)dt.Rows[0]["SourceColumnDataType"];
					retObj._isUniqueColumn					 = Convert.IsDBNull(dt.Rows[0]["IsUniqueColumn"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsUniqueColumn"]);
					retObj._targetColumn					 = Convert.IsDBNull(dt.Rows[0]["TargetColumn"]) ? null : (string)dt.Rows[0]["TargetColumn"];
					retObj._targetColumnDataType					 = Convert.IsDBNull(dt.Rows[0]["TargetColumnDataType"]) ? null : (string)dt.Rows[0]["TargetColumnDataType"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table TemplateColumnDetail based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string templateColumnDetailGUID
		///</parameters>
		public virtual void DeleteOneByTemplateColumnDetailGUID(string templateColumnDetailGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_deleteonebytemplatecolumndetailguid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_templateColumnDetailGUID?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table TemplateColumnDetail
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILID", MySqlDbType.Int32, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _templateColumnDetailId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateColumnDetailGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATETABLEDETAILID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateTableDetailId));
				command.Parameters.Add(new MySqlParameter("?P_SOURCECOLUMN", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceColumn));
				command.Parameters.Add(new MySqlParameter("?P_SOURCEDEPENDENTCOLUMN", MySqlDbType.VarChar, 225, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceDependentColumn));
				command.Parameters.Add(new MySqlParameter("?P_SOURCECOLUMNDATATYPE", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceColumnDataType));
				command.Parameters.Add(new MySqlParameter("?P_ISUNIQUECOLUMN", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isUniqueColumn));
				command.Parameters.Add(new MySqlParameter("?P_TARGETCOLUMN", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetColumn));
				command.Parameters.Add(new MySqlParameter("?P_TARGETCOLUMNDATATYPE", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetColumnDataType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_templateColumnDetailId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATECOLUMNDETAILID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATECOLUMNDETAILID"].Value;
				_templateColumnDetailGUID					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATECOLUMNDETAILGUID"].Value) ? null : (string)command.Parameters["?P_TEMPLATECOLUMNDETAILGUID"].Value;
				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_templateTableDetailId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATETABLEDETAILID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATETABLEDETAILID"].Value;
				_sourceColumn					 = Convert.IsDBNull(command.Parameters["?P_SOURCECOLUMN"].Value) ? null : (string)command.Parameters["?P_SOURCECOLUMN"].Value;
				_sourceDependentColumn					 = Convert.IsDBNull(command.Parameters["?P_SOURCEDEPENDENTCOLUMN"].Value) ? null : (string)command.Parameters["?P_SOURCEDEPENDENTCOLUMN"].Value;
				_sourceColumnDataType					 = Convert.IsDBNull(command.Parameters["?P_SOURCECOLUMNDATATYPE"].Value) ? null : (string)command.Parameters["?P_SOURCECOLUMNDATATYPE"].Value;
				_isUniqueColumn					 = Convert.IsDBNull(command.Parameters["?P_ISUNIQUECOLUMN"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISUNIQUECOLUMN"].Value);
				_targetColumn					 = Convert.IsDBNull(command.Parameters["?P_TARGETCOLUMN"].Value) ? null : (string)command.Parameters["?P_TARGETCOLUMN"].Value;
				_targetColumnDataType					 = Convert.IsDBNull(command.Parameters["?P_TARGETCOLUMNDATATYPE"].Value) ? null : (string)command.Parameters["?P_TARGETCOLUMNDATATYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table TemplateColumnDetail
		///</Summary>
		///<returns>
		///List-DLTemplateColumnDetail.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DLTemplateColumnDetail> SelectAll()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TemplateColumnDetail");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLTemplateColumnDetail> objList = new List<DLTemplateColumnDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLTemplateColumnDetail retObj = new DLTemplateColumnDetail();
						retObj._templateColumnDetailId					 = Convert.IsDBNull(row["TemplateColumnDetailId"]) ? (Int32?)null : (Int32?)row["TemplateColumnDetailId"];
						retObj._templateColumnDetailGUID					 = Convert.IsDBNull(row["TemplateColumnDetailGUID"]) ? null : (string)row["TemplateColumnDetailGUID"];
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._templateTableDetailId					 = Convert.IsDBNull(row["TemplateTableDetailId"]) ? (Int32?)null : (Int32?)row["TemplateTableDetailId"];
						retObj._sourceColumn					 = Convert.IsDBNull(row["SourceColumn"]) ? null : (string)row["SourceColumn"];
						retObj._sourceDependentColumn					 = Convert.IsDBNull(row["SourceDependentColumn"]) ? null : (string)row["SourceDependentColumn"];
						retObj._sourceColumnDataType					 = Convert.IsDBNull(row["SourceColumnDataType"]) ? null : (string)row["SourceColumnDataType"];
						retObj._isUniqueColumn					 = Convert.IsDBNull(row["IsUniqueColumn"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsUniqueColumn"]);
						retObj._targetColumn					 = Convert.IsDBNull(row["TargetColumn"]) ? null : (string)row["TargetColumn"];
						retObj._targetColumnDataType					 = Convert.IsDBNull(row["TargetColumnDataType"]) ? null : (string)row["TargetColumnDataType"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiTemplateColumnDetail
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TemplateColumnDetail");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_FIELDSFIELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "TemplateColumnDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateColumnDetailId"]) ? (Int32?)null : (Int32?)row["TemplateColumnDetailId"]);
						if (string.Compare(projection.Member, "TemplateColumnDetailGUID", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateColumnDetailGUID"]) ? null : (string)row["TemplateColumnDetailGUID"]);
						if (string.Compare(projection.Member, "TemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"]);
						if (string.Compare(projection.Member, "TemplateTableDetailId", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateTableDetailId"]) ? (Int32?)null : (Int32?)row["TemplateTableDetailId"]);
						if (string.Compare(projection.Member, "SourceColumn", true) == 0) lst.Add(Convert.IsDBNull(row["SourceColumn"]) ? null : (string)row["SourceColumn"]);
						if (string.Compare(projection.Member, "SourceDependentColumn", true) == 0) lst.Add(Convert.IsDBNull(row["SourceDependentColumn"]) ? null : (string)row["SourceDependentColumn"]);
						if (string.Compare(projection.Member, "SourceColumnDataType", true) == 0) lst.Add(Convert.IsDBNull(row["SourceColumnDataType"]) ? null : (string)row["SourceColumnDataType"]);
						if (string.Compare(projection.Member, "IsUniqueColumn", true) == 0) lst.Add(Convert.IsDBNull(row["IsUniqueColumn"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsUniqueColumn"]));
						if (string.Compare(projection.Member, "TargetColumn", true) == 0) lst.Add(Convert.IsDBNull(row["TargetColumn"]) ? null : (string)row["TargetColumn"]);
						if (string.Compare(projection.Member, "TargetColumnDataType", true) == 0) lst.Add(Convert.IsDBNull(row["TargetColumnDataType"]) ? null : (string)row["TargetColumnDataType"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]));
						if (string.Compare(projection.Member, "IsDelete", true) == 0) lst.Add(Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]));
						if (string.Compare(projection.Member, "EnteredBy", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"]);
						if (string.Compare(projection.Member, "EnteredDate", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"]);
						if (string.Compare(projection.Member, "UpdatedBy", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"]);
						if (string.Compare(projection.Member, "UpdatedDate", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api TemplateColumnDetail
		///</Summary>
		///<returns>
		///List-DLTemplateColumnDetail.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<DLTemplateColumnDetail> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("TemplateColumnDetail");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLTemplateColumnDetail> objList = new List<DLTemplateColumnDetail>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLTemplateColumnDetail retObj = new DLTemplateColumnDetail();
						retObj._templateColumnDetailId					 = Convert.IsDBNull(row["TemplateColumnDetailId"]) ? (Int32?)null : (Int32?)row["TemplateColumnDetailId"];
						retObj._templateColumnDetailGUID					 = Convert.IsDBNull(row["TemplateColumnDetailGUID"]) ? null : (string)row["TemplateColumnDetailGUID"];
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._templateTableDetailId					 = Convert.IsDBNull(row["TemplateTableDetailId"]) ? (Int32?)null : (Int32?)row["TemplateTableDetailId"];
						retObj._sourceColumn					 = Convert.IsDBNull(row["SourceColumn"]) ? null : (string)row["SourceColumn"];
						retObj._sourceDependentColumn					 = Convert.IsDBNull(row["SourceDependentColumn"]) ? null : (string)row["SourceDependentColumn"];
						retObj._sourceColumnDataType					 = Convert.IsDBNull(row["SourceColumnDataType"]) ? null : (string)row["SourceColumnDataType"];
						retObj._isUniqueColumn					 = Convert.IsDBNull(row["IsUniqueColumn"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsUniqueColumn"]);
						retObj._targetColumn					 = Convert.IsDBNull(row["TargetColumn"]) ? null : (string)row["TargetColumn"];
						retObj._targetColumnDataType					 = Convert.IsDBNull(row["TargetColumnDataType"]) ? null : (string)row["TargetColumnDataType"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api TemplateColumnDetail
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table TemplateColumnDetail based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "templatecolumndetail_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateColumnDetailId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATECOLUMNDETAILGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateColumnDetailGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATETABLEDETAILID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateTableDetailId));
				command.Parameters.Add(new MySqlParameter("?P_SOURCECOLUMN", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceColumn));
				command.Parameters.Add(new MySqlParameter("?P_SOURCEDEPENDENTCOLUMN", MySqlDbType.VarChar, 225, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceDependentColumn));
				command.Parameters.Add(new MySqlParameter("?P_SOURCECOLUMNDATATYPE", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _sourceColumnDataType));
				command.Parameters.Add(new MySqlParameter("?P_ISUNIQUECOLUMN", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isUniqueColumn));
				command.Parameters.Add(new MySqlParameter("?P_TARGETCOLUMN", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetColumn));
				command.Parameters.Add(new MySqlParameter("?P_TARGETCOLUMNDATATYPE", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetColumnDataType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_templateColumnDetailId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATECOLUMNDETAILID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATECOLUMNDETAILID"].Value;
				_templateColumnDetailGUID					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATECOLUMNDETAILGUID"].Value) ? null : (string)command.Parameters["?P_TEMPLATECOLUMNDETAILGUID"].Value;
				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_templateTableDetailId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATETABLEDETAILID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATETABLEDETAILID"].Value;
				_sourceColumn					 = Convert.IsDBNull(command.Parameters["?P_SOURCECOLUMN"].Value) ? null : (string)command.Parameters["?P_SOURCECOLUMN"].Value;
				_sourceDependentColumn					 = Convert.IsDBNull(command.Parameters["?P_SOURCEDEPENDENTCOLUMN"].Value) ? null : (string)command.Parameters["?P_SOURCEDEPENDENTCOLUMN"].Value;
				_sourceColumnDataType					 = Convert.IsDBNull(command.Parameters["?P_SOURCECOLUMNDATATYPE"].Value) ? null : (string)command.Parameters["?P_SOURCECOLUMNDATATYPE"].Value;
				_isUniqueColumn					 = Convert.IsDBNull(command.Parameters["?P_ISUNIQUECOLUMN"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISUNIQUECOLUMN"].Value);
				_targetColumn					 = Convert.IsDBNull(command.Parameters["?P_TARGETCOLUMN"].Value) ? null : (string)command.Parameters["?P_TARGETCOLUMN"].Value;
				_targetColumnDataType					 = Convert.IsDBNull(command.Parameters["?P_TARGETCOLUMNDATATYPE"].Value) ? null : (string)command.Parameters["?P_TARGETCOLUMNDATATYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public Int32? TemplateColumnDetailId
		{
			get
			{
				return _templateColumnDetailId;
			}
			set
			{
				_templateColumnDetailId = value;
			}
		}
		public string TemplateColumnDetailGUID
		{
			get
			{
				return _templateColumnDetailGUID;
			}
			set
			{
				_templateColumnDetailGUID = value;
			}
		}
		public Int32? TemplateId
		{
			get
			{
				return _templateId;
			}
			set
			{
				_templateId = value;
			}
		}
		public Int32? TemplateTableDetailId
		{
			get
			{
				return _templateTableDetailId;
			}
			set
			{
				_templateTableDetailId = value;
			}
		}
		public string SourceColumn
		{
			get
			{
				return _sourceColumn;
			}
			set
			{
				_sourceColumn = value;
			}
		}
		public string SourceDependentColumn
		{
			get
			{
				return _sourceDependentColumn;
			}
			set
			{
				_sourceDependentColumn = value;
			}
		}
		public string SourceColumnDataType
		{
			get
			{
				return _sourceColumnDataType;
			}
			set
			{
				_sourceColumnDataType = value;
			}
		}
		public bool? IsUniqueColumn
		{
			get
			{
				return _isUniqueColumn;
			}
			set
			{
				_isUniqueColumn = value;
			}
		}
		public string TargetColumn
		{
			get
			{
				return _targetColumn;
			}
			set
			{
				_targetColumn = value;
			}
		}
		public string TargetColumnDataType
		{
			get
			{
				return _targetColumnDataType;
			}
			set
			{
				_targetColumnDataType = value;
			}
		}
		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}
		public bool? IsDelete
		{
			get
			{
				return _isDelete;
			}
			set
			{
				_isDelete = value;
			}
		}
		public Int32? EnteredBy
		{
			get
			{
				return _enteredBy;
			}
			set
			{
				_enteredBy = value;
			}
		}
		public DateTime? EnteredDate
		{
			get
			{
				return _enteredDate;
			}
			set
			{
				_enteredDate = value;
			}
		}
		public Int32? UpdatedBy
		{
			get
			{
				return _updatedBy;
			}
			set
			{
				_updatedBy = value;
			}
		}
		public DateTime? UpdatedDate
		{
			get
			{
				return _updatedDate;
			}
			set
			{
				_updatedDate = value;
			}
		}
		#endregion
	}
}
