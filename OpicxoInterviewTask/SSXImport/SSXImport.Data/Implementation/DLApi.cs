/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:33
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using SSXImport.Data.Interfaces;

namespace SSXImport.Data
{
	public partial class DLApi : SSXImport_BaseData
	{
		#region member variables
		protected Int32? _aPIId;
		protected string _apiguid;
		protected string _name;
		protected string _aPIEndPoint;
		protected Int32? _type;
		protected string _description;
		protected Int32? _authorizationType;
		protected string _authorizationUsername;
		protected string _authorizationPassword;
		protected Int32? _authorizationOathAPIId;
		protected string _authorizationTokenName;
		protected Int32? _inputParameterType;
		protected Int32? _bodyParameterType;
		protected string _outPutParameterJson;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		#endregion

		#region class methods
		public DLApi()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table API based on the primary key(s)
		///</Summary>
		///<returns>
		///DLApi
		///</returns>
		///<parameters>
		///Int32? aPIId
		///</parameters>
		public static DLApi SelectOne(Int32? aPIId)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("API");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)aPIId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLApi retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLApi();
					retObj._aPIId					 = Convert.IsDBNull(dt.Rows[0]["APIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["APIId"];
					retObj._apiguid					 = Convert.IsDBNull(dt.Rows[0]["APIGUID"]) ? null : (string)dt.Rows[0]["APIGUID"];
					retObj._name					 = Convert.IsDBNull(dt.Rows[0]["Name"]) ? null : (string)dt.Rows[0]["Name"];
					retObj._aPIEndPoint					 = Convert.IsDBNull(dt.Rows[0]["APIEndPoint"]) ? null : (string)dt.Rows[0]["APIEndPoint"];
					retObj._type					 = Convert.IsDBNull(dt.Rows[0]["Type"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Type"];
					retObj._description					 = Convert.IsDBNull(dt.Rows[0]["Description"]) ? null : (string)dt.Rows[0]["Description"];
					retObj._authorizationType					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AuthorizationType"];
					retObj._authorizationUsername					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationUsername"]) ? null : (string)dt.Rows[0]["AuthorizationUsername"];
					retObj._authorizationPassword					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationPassword"]) ? null : (string)dt.Rows[0]["AuthorizationPassword"];
					retObj._authorizationOathAPIId					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationOathAPIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AuthorizationOathAPIId"];
					retObj._authorizationTokenName					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationTokenName"]) ? null : (string)dt.Rows[0]["AuthorizationTokenName"];
					retObj._inputParameterType					 = Convert.IsDBNull(dt.Rows[0]["InputParameterType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterType"];
					retObj._bodyParameterType					 = Convert.IsDBNull(dt.Rows[0]["BodyParameterType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BodyParameterType"];
					retObj._outPutParameterJson					 = Convert.IsDBNull(dt.Rows[0]["OutPutParameterJson"]) ? null : (string)dt.Rows[0]["OutPutParameterJson"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table API based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_aPIId?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table API based on a unique constraint
		///</Summary>
		///<returns>
		///DLApi
		///</returns>
		///<parameters>
		///string apiguid
		///</parameters>
		public static DLApi SelectOneByApiguid(string apiguid)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getonebyapiguid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("API");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIGUID", MySqlDbType.VarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)apiguid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLApi retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLApi();
					retObj._aPIId					 = Convert.IsDBNull(dt.Rows[0]["APIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["APIId"];
					retObj._apiguid					 = Convert.IsDBNull(dt.Rows[0]["APIGUID"]) ? null : (string)dt.Rows[0]["APIGUID"];
					retObj._name					 = Convert.IsDBNull(dt.Rows[0]["Name"]) ? null : (string)dt.Rows[0]["Name"];
					retObj._aPIEndPoint					 = Convert.IsDBNull(dt.Rows[0]["APIEndPoint"]) ? null : (string)dt.Rows[0]["APIEndPoint"];
					retObj._type					 = Convert.IsDBNull(dt.Rows[0]["Type"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Type"];
					retObj._description					 = Convert.IsDBNull(dt.Rows[0]["Description"]) ? null : (string)dt.Rows[0]["Description"];
					retObj._authorizationType					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AuthorizationType"];
					retObj._authorizationUsername					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationUsername"]) ? null : (string)dt.Rows[0]["AuthorizationUsername"];
					retObj._authorizationPassword					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationPassword"]) ? null : (string)dt.Rows[0]["AuthorizationPassword"];
					retObj._authorizationOathAPIId					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationOathAPIId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AuthorizationOathAPIId"];
					retObj._authorizationTokenName					 = Convert.IsDBNull(dt.Rows[0]["AuthorizationTokenName"]) ? null : (string)dt.Rows[0]["AuthorizationTokenName"];
					retObj._inputParameterType					 = Convert.IsDBNull(dt.Rows[0]["InputParameterType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["InputParameterType"];
					retObj._bodyParameterType					 = Convert.IsDBNull(dt.Rows[0]["BodyParameterType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["BodyParameterType"];
					retObj._outPutParameterJson					 = Convert.IsDBNull(dt.Rows[0]["OutPutParameterJson"]) ? null : (string)dt.Rows[0]["OutPutParameterJson"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table API based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string apiguid
		///</parameters>
		public virtual void DeleteOneByApiguid(string apiguid)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_deleteonebyapiguid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIGUID", MySqlDbType.VarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_apiguid?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table API
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIENDPOINT", MySqlDbType.LongText, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_aPIEndPoint?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_DESCRIPTION", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_description?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_OUTPUTPARAMETERJSON", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_outPutParameterJson?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _aPIId));
				command.Parameters.Add(new MySqlParameter("?P_APIGUID", MySqlDbType.VarChar, 250, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _apiguid));
				command.Parameters.Add(new MySqlParameter("?P_NAME", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _name));
				command.Parameters.Add(new MySqlParameter("?P_TYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _type));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _authorizationType));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONUSERNAME", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationUsername));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONPASSWORD", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationPassword));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONOATHAPIID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _authorizationOathAPIId));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONTOKENNAME", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationTokenName));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterType));
				command.Parameters.Add(new MySqlParameter("?P_BODYPARAMETERTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _bodyParameterType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_aPIId					 = Convert.IsDBNull(command.Parameters["?P_APIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_APIID"].Value;
				_apiguid					 = Convert.IsDBNull(command.Parameters["?P_APIGUID"].Value) ? null : (string)command.Parameters["?P_APIGUID"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["?P_NAME"].Value) ? null : (string)command.Parameters["?P_NAME"].Value;
				_type					 = Convert.IsDBNull(command.Parameters["?P_TYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TYPE"].Value;
				_authorizationType					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_AUTHORIZATIONTYPE"].Value;
				_authorizationUsername					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONUSERNAME"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONUSERNAME"].Value;
				_authorizationPassword					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONPASSWORD"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONPASSWORD"].Value;
				_authorizationOathAPIId					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONOATHAPIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_AUTHORIZATIONOATHAPIID"].Value;
				_authorizationTokenName					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONTOKENNAME"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONTOKENNAME"].Value;
				_inputParameterType					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERTYPE"].Value;
				_bodyParameterType					 = Convert.IsDBNull(command.Parameters["?P_BODYPARAMETERTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_BODYPARAMETERTYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table API
		///</Summary>
		///<returns>
		///List-DLApi.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DLApi> SelectAll()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("API");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLApi> objList = new List<DLApi>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLApi retObj = new DLApi();
						retObj._aPIId					 = Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"];
						retObj._apiguid					 = Convert.IsDBNull(row["APIGUID"]) ? null : (string)row["APIGUID"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._aPIEndPoint					 = Convert.IsDBNull(row["APIEndPoint"]) ? null : (string)row["APIEndPoint"];
						retObj._type					 = Convert.IsDBNull(row["Type"]) ? (Int32?)null : (Int32?)row["Type"];
						retObj._description					 = Convert.IsDBNull(row["Description"]) ? null : (string)row["Description"];
						retObj._authorizationType					 = Convert.IsDBNull(row["AuthorizationType"]) ? (Int32?)null : (Int32?)row["AuthorizationType"];
						retObj._authorizationUsername					 = Convert.IsDBNull(row["AuthorizationUsername"]) ? null : (string)row["AuthorizationUsername"];
						retObj._authorizationPassword					 = Convert.IsDBNull(row["AuthorizationPassword"]) ? null : (string)row["AuthorizationPassword"];
						retObj._authorizationOathAPIId					 = Convert.IsDBNull(row["AuthorizationOathAPIId"]) ? (Int32?)null : (Int32?)row["AuthorizationOathAPIId"];
						retObj._authorizationTokenName					 = Convert.IsDBNull(row["AuthorizationTokenName"]) ? null : (string)row["AuthorizationTokenName"];
						retObj._inputParameterType					 = Convert.IsDBNull(row["InputParameterType"]) ? (Int32?)null : (Int32?)row["InputParameterType"];
						retObj._bodyParameterType					 = Convert.IsDBNull(row["BodyParameterType"]) ? (Int32?)null : (Int32?)row["BodyParameterType"];
						retObj._outPutParameterJson					 = Convert.IsDBNull(row["OutPutParameterJson"]) ? null : (string)row["OutPutParameterJson"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiAPI
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("API");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_FIELDSFIELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "APIId", true) == 0) lst.Add(Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"]);
						if (string.Compare(projection.Member, "APIGUID", true) == 0) lst.Add(Convert.IsDBNull(row["APIGUID"]) ? null : (string)row["APIGUID"]);
						if (string.Compare(projection.Member, "Name", true) == 0) lst.Add(Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"]);
						if (string.Compare(projection.Member, "APIEndPoint", true) == 0) lst.Add(Convert.IsDBNull(row["APIEndPoint"]) ? null : (string)row["APIEndPoint"]);
						if (string.Compare(projection.Member, "Type", true) == 0) lst.Add(Convert.IsDBNull(row["Type"]) ? (Int32?)null : (Int32?)row["Type"]);
						if (string.Compare(projection.Member, "Description", true) == 0) lst.Add(Convert.IsDBNull(row["Description"]) ? null : (string)row["Description"]);
						if (string.Compare(projection.Member, "AuthorizationType", true) == 0) lst.Add(Convert.IsDBNull(row["AuthorizationType"]) ? (Int32?)null : (Int32?)row["AuthorizationType"]);
						if (string.Compare(projection.Member, "AuthorizationUsername", true) == 0) lst.Add(Convert.IsDBNull(row["AuthorizationUsername"]) ? null : (string)row["AuthorizationUsername"]);
						if (string.Compare(projection.Member, "AuthorizationPassword", true) == 0) lst.Add(Convert.IsDBNull(row["AuthorizationPassword"]) ? null : (string)row["AuthorizationPassword"]);
						if (string.Compare(projection.Member, "AuthorizationOathAPIId", true) == 0) lst.Add(Convert.IsDBNull(row["AuthorizationOathAPIId"]) ? (Int32?)null : (Int32?)row["AuthorizationOathAPIId"]);
						if (string.Compare(projection.Member, "AuthorizationTokenName", true) == 0) lst.Add(Convert.IsDBNull(row["AuthorizationTokenName"]) ? null : (string)row["AuthorizationTokenName"]);
						if (string.Compare(projection.Member, "InputParameterType", true) == 0) lst.Add(Convert.IsDBNull(row["InputParameterType"]) ? (Int32?)null : (Int32?)row["InputParameterType"]);
						if (string.Compare(projection.Member, "BodyParameterType", true) == 0) lst.Add(Convert.IsDBNull(row["BodyParameterType"]) ? (Int32?)null : (Int32?)row["BodyParameterType"]);
						if (string.Compare(projection.Member, "OutPutParameterJson", true) == 0) lst.Add(Convert.IsDBNull(row["OutPutParameterJson"]) ? null : (string)row["OutPutParameterJson"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]));
						if (string.Compare(projection.Member, "IsDelete", true) == 0) lst.Add(Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]));
						if (string.Compare(projection.Member, "EnteredBy", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"]);
						if (string.Compare(projection.Member, "EnteredDate", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"]);
						if (string.Compare(projection.Member, "UpdatedBy", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"]);
						if (string.Compare(projection.Member, "UpdatedDate", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api API
		///</Summary>
		///<returns>
		///List-DLApi.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<DLApi> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("API");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLApi> objList = new List<DLApi>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLApi retObj = new DLApi();
						retObj._aPIId					 = Convert.IsDBNull(row["APIId"]) ? (Int32?)null : (Int32?)row["APIId"];
						retObj._apiguid					 = Convert.IsDBNull(row["APIGUID"]) ? null : (string)row["APIGUID"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._aPIEndPoint					 = Convert.IsDBNull(row["APIEndPoint"]) ? null : (string)row["APIEndPoint"];
						retObj._type					 = Convert.IsDBNull(row["Type"]) ? (Int32?)null : (Int32?)row["Type"];
						retObj._description					 = Convert.IsDBNull(row["Description"]) ? null : (string)row["Description"];
						retObj._authorizationType					 = Convert.IsDBNull(row["AuthorizationType"]) ? (Int32?)null : (Int32?)row["AuthorizationType"];
						retObj._authorizationUsername					 = Convert.IsDBNull(row["AuthorizationUsername"]) ? null : (string)row["AuthorizationUsername"];
						retObj._authorizationPassword					 = Convert.IsDBNull(row["AuthorizationPassword"]) ? null : (string)row["AuthorizationPassword"];
						retObj._authorizationOathAPIId					 = Convert.IsDBNull(row["AuthorizationOathAPIId"]) ? (Int32?)null : (Int32?)row["AuthorizationOathAPIId"];
						retObj._authorizationTokenName					 = Convert.IsDBNull(row["AuthorizationTokenName"]) ? null : (string)row["AuthorizationTokenName"];
						retObj._inputParameterType					 = Convert.IsDBNull(row["InputParameterType"]) ? (Int32?)null : (Int32?)row["InputParameterType"];
						retObj._bodyParameterType					 = Convert.IsDBNull(row["BodyParameterType"]) ? (Int32?)null : (Int32?)row["BodyParameterType"];
						retObj._outPutParameterJson					 = Convert.IsDBNull(row["OutPutParameterJson"]) ? null : (string)row["OutPutParameterJson"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api API
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table API based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "api_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_APIENDPOINT", MySqlDbType.LongText, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_aPIEndPoint?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_DESCRIPTION", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_description?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_OUTPUTPARAMETERJSON", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_outPutParameterJson?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_APIID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _aPIId));
				command.Parameters.Add(new MySqlParameter("?P_APIGUID", MySqlDbType.VarChar, 250, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _apiguid));
				command.Parameters.Add(new MySqlParameter("?P_NAME", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _name));
				command.Parameters.Add(new MySqlParameter("?P_TYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _type));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _authorizationType));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONUSERNAME", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationUsername));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONPASSWORD", MySqlDbType.VarChar, 500, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationPassword));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONOATHAPIID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _authorizationOathAPIId));
				command.Parameters.Add(new MySqlParameter("?P_AUTHORIZATIONTOKENNAME", MySqlDbType.VarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _authorizationTokenName));
				command.Parameters.Add(new MySqlParameter("?P_INPUTPARAMETERTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inputParameterType));
				command.Parameters.Add(new MySqlParameter("?P_BODYPARAMETERTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _bodyParameterType));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_aPIId					 = Convert.IsDBNull(command.Parameters["?P_APIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_APIID"].Value;
				_apiguid					 = Convert.IsDBNull(command.Parameters["?P_APIGUID"].Value) ? null : (string)command.Parameters["?P_APIGUID"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["?P_NAME"].Value) ? null : (string)command.Parameters["?P_NAME"].Value;
				_type					 = Convert.IsDBNull(command.Parameters["?P_TYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TYPE"].Value;
				_authorizationType					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_AUTHORIZATIONTYPE"].Value;
				_authorizationUsername					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONUSERNAME"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONUSERNAME"].Value;
				_authorizationPassword					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONPASSWORD"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONPASSWORD"].Value;
				_authorizationOathAPIId					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONOATHAPIID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_AUTHORIZATIONOATHAPIID"].Value;
				_authorizationTokenName					 = Convert.IsDBNull(command.Parameters["?P_AUTHORIZATIONTOKENNAME"].Value) ? null : (string)command.Parameters["?P_AUTHORIZATIONTOKENNAME"].Value;
				_inputParameterType					 = Convert.IsDBNull(command.Parameters["?P_INPUTPARAMETERTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_INPUTPARAMETERTYPE"].Value;
				_bodyParameterType					 = Convert.IsDBNull(command.Parameters["?P_BODYPARAMETERTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_BODYPARAMETERTYPE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public Int32? APIId
		{
			get
			{
				return _aPIId;
			}
			set
			{
				_aPIId = value;
			}
		}
		public string Apiguid
		{
			get
			{
				return _apiguid;
			}
			set
			{
				_apiguid = value;
			}
		}
		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}
		public string APIEndPoint
		{
			get
			{
				return _aPIEndPoint;
			}
			set
			{
				_aPIEndPoint = value;
			}
		}
		public Int32? Type
		{
			get
			{
				return _type;
			}
			set
			{
				_type = value;
			}
		}
		public string Description
		{
			get
			{
				return _description;
			}
			set
			{
				_description = value;
			}
		}
		public Int32? AuthorizationType
		{
			get
			{
				return _authorizationType;
			}
			set
			{
				_authorizationType = value;
			}
		}
		public string AuthorizationUsername
		{
			get
			{
				return _authorizationUsername;
			}
			set
			{
				_authorizationUsername = value;
			}
		}
		public string AuthorizationPassword
		{
			get
			{
				return _authorizationPassword;
			}
			set
			{
				_authorizationPassword = value;
			}
		}
		public Int32? AuthorizationOathAPIId
		{
			get
			{
				return _authorizationOathAPIId;
			}
			set
			{
				_authorizationOathAPIId = value;
			}
		}
		public string AuthorizationTokenName
		{
			get
			{
				return _authorizationTokenName;
			}
			set
			{
				_authorizationTokenName = value;
			}
		}
		public Int32? InputParameterType
		{
			get
			{
				return _inputParameterType;
			}
			set
			{
				_inputParameterType = value;
			}
		}
		public Int32? BodyParameterType
		{
			get
			{
				return _bodyParameterType;
			}
			set
			{
				_bodyParameterType = value;
			}
		}
		public string OutPutParameterJson
		{
			get
			{
				return _outPutParameterJson;
			}
			set
			{
				_outPutParameterJson = value;
			}
		}
		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}
		public bool? IsDelete
		{
			get
			{
				return _isDelete;
			}
			set
			{
				_isDelete = value;
			}
		}
		public Int32? EnteredBy
		{
			get
			{
				return _enteredBy;
			}
			set
			{
				_enteredBy = value;
			}
		}
		public DateTime? EnteredDate
		{
			get
			{
				return _enteredDate;
			}
			set
			{
				_enteredDate = value;
			}
		}
		public Int32? UpdatedBy
		{
			get
			{
				return _updatedBy;
			}
			set
			{
				_updatedBy = value;
			}
		}
		public DateTime? UpdatedDate
		{
			get
			{
				return _updatedDate;
			}
			set
			{
				_updatedDate = value;
			}
		}
		#endregion
	}
}
