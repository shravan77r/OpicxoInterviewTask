/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using SSXImport.Data.Interfaces;

namespace SSXImport.Data
{
	public partial class DLTemplate : SSXImport_BaseData
	{
		#region member variables
		protected Int32? _templateId;
		protected string _templateGUID;
		protected string _templateName;
		protected Int32? _templateType;
		protected Int32? _originSourceTypeId;
		protected Int32? _originSourceAPITemplateId;
		protected Int32? _originSourceFileTypeId;
		protected string _originSourceServer;
		protected string _originSourcePort;
		protected string _originSourceUsername;
		protected string _originSourcePassword;
		protected string _originSourceDatabase;
		protected string _originSourceFilePath;
		protected string _originSourceFileName;
		protected bool? _isFirstColumnContainHeader;
		protected Int32? _targetSourceTypeId;
		protected Int32? _targetSourceAPITemplateId;
		protected string _targetSourceServer;
		protected string _targetSourcePort;
		protected string _targetSourceUsername;
		protected string _targetSourcePassword;
		protected string _targetSourceDatabase;
		protected bool? _isScheduleEnabled;
		protected Int32? _scheduleType;
		protected Int32? _frequencyType;
		protected Int32? _frequencyRecurrsDailyEveryDay;
		protected Int32? _frequencyRecurrsWeeklyEveryWeek;
		protected bool? _isFrequencyRecurrsWeeklyOnMonday;
		protected bool? _isFrequencyRecurrsWeeklyOnTuesday;
		protected bool? _isFrequencyRecurrsWeeklyOnWednesday;
		protected bool? _isFrequencyRecurrsWeeklyOnThursday;
		protected bool? _isFrequencyRecurrsWeeklyOnFriday;
		protected bool? _isFrequencyRecurrsWeeklyOnSaturday;
		protected bool? _isFrequencyRecurrsWeeklyOnSunday;
		protected Int32? _frequencyRecurrsMonthlyType;
		protected Int32? _frequencyRecurrsMonthtlyEveryMonth;
		protected Int32? _frequencyRecurrsMonthtlyDayOfMonth;
		protected Int32? _frequencyRecurrsMonthtlyDayOfWeekOccurance;
		protected Int32? _frequencyRecurrsMonthtlyDayOfWeek;
		protected Int32? _dailyFrequencyType;
		protected TimeSpan? _dailyFrequencyTime;
		protected Int32? _dailyFrequencyOccuranceType;
		protected Int32? _dailyFrequencyOccuranceEvery;
		protected TimeSpan? _dailyFrequencyOccuranceStartTime;
		protected TimeSpan? _dailyFrequencyOccuranceEndTime;
		protected DateTime? _durationStartDate;
		protected bool? _isDurationEndDateSpecified;
		protected DateTime? _durationEndDate;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		#endregion

		#region class methods
		public DLTemplate()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Template based on the primary key(s)
		///</Summary>
		///<returns>
		///DLTemplate
		///</returns>
		///<parameters>
		///Int32? templateId
		///</parameters>
		public static DLTemplate SelectOne(Int32? templateId)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Template");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)templateId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLTemplate retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLTemplate();
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._templateGUID					 = Convert.IsDBNull(dt.Rows[0]["TemplateGUID"]) ? null : (string)dt.Rows[0]["TemplateGUID"];
					retObj._templateName					 = Convert.IsDBNull(dt.Rows[0]["TemplateName"]) ? null : (string)dt.Rows[0]["TemplateName"];
					retObj._templateType					 = Convert.IsDBNull(dt.Rows[0]["TemplateType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateType"];
					retObj._originSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceTypeId"];
					retObj._originSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceAPITemplateId"];
					retObj._originSourceFileTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceFileTypeId"];
					retObj._originSourceServer					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceServer"]) ? null : (string)dt.Rows[0]["OriginSourceServer"];
					retObj._originSourcePort					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePort"]) ? null : (string)dt.Rows[0]["OriginSourcePort"];
					retObj._originSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceUsername"]) ? null : (string)dt.Rows[0]["OriginSourceUsername"];
					retObj._originSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePassword"]) ? null : (string)dt.Rows[0]["OriginSourcePassword"];
					retObj._originSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceDatabase"]) ? null : (string)dt.Rows[0]["OriginSourceDatabase"];
					retObj._originSourceFilePath					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFilePath"]) ? null : (string)dt.Rows[0]["OriginSourceFilePath"];
					retObj._originSourceFileName					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileName"]) ? null : (string)dt.Rows[0]["OriginSourceFileName"];
					retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(dt.Rows[0]["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFirstColumnContainHeader"]);
					retObj._targetSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceTypeId"];
					retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceAPITemplateId"];
					retObj._targetSourceServer					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceServer"]) ? null : (string)dt.Rows[0]["TargetSourceServer"];
					retObj._targetSourcePort					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePort"]) ? null : (string)dt.Rows[0]["TargetSourcePort"];
					retObj._targetSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceUsername"]) ? null : (string)dt.Rows[0]["TargetSourceUsername"];
					retObj._targetSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePassword"]) ? null : (string)dt.Rows[0]["TargetSourcePassword"];
					retObj._targetSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceDatabase"]) ? null : (string)dt.Rows[0]["TargetSourceDatabase"];
					retObj._isScheduleEnabled					 = Convert.IsDBNull(dt.Rows[0]["IsScheduleEnabled"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsScheduleEnabled"]);
					retObj._scheduleType					 = Convert.IsDBNull(dt.Rows[0]["ScheduleType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ScheduleType"];
					retObj._frequencyType					 = Convert.IsDBNull(dt.Rows[0]["FrequencyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyType"];
					retObj._frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsDailyEveryDay"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsDailyEveryDay"];
					retObj._frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsWeeklyEveryWeek"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsWeeklyEveryWeek"];
					retObj._isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnMonday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnMonday"]);
					retObj._isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnTuesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnTuesday"]);
					retObj._isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnWednesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnWednesday"]);
					retObj._isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnThursday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnThursday"]);
					retObj._isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnFriday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnFriday"]);
					retObj._isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSaturday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSaturday"]);
					retObj._isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSunday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSunday"]);
					retObj._frequencyRecurrsMonthlyType					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthlyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthlyType"];
					retObj._frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyEveryMonth"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyEveryMonth"];
					retObj._frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfMonth"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfMonth"];
					retObj._frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeekOccurance"];
					retObj._frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeek"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeek"];
					retObj._dailyFrequencyType					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyType"];
					retObj._dailyFrequencyTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyTime"];
					retObj._dailyFrequencyOccuranceType					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyOccuranceType"];
					retObj._dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceEvery"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyOccuranceEvery"];
					retObj._dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceStartTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyOccuranceStartTime"];
					retObj._dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceEndTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyOccuranceEndTime"];
					retObj._durationStartDate					 = Convert.IsDBNull(dt.Rows[0]["DurationStartDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DurationStartDate"];
					retObj._isDurationEndDateSpecified					 = Convert.IsDBNull(dt.Rows[0]["IsDurationEndDateSpecified"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDurationEndDateSpecified"]);
					retObj._durationEndDate					 = Convert.IsDBNull(dt.Rows[0]["DurationEndDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DurationEndDate"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Template based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_templateId?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select one row by unique constraint
		///This method returns one row from the table Template based on a unique constraint
		///</Summary>
		///<returns>
		///DLTemplate
		///</returns>
		///<parameters>
		///string templateGUID
		///</parameters>
		public static DLTemplate SelectOneByTemplateGUID(string templateGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getonebytemplateguid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Template");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)templateGUID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				DLTemplate retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DLTemplate();
					retObj._templateId					 = Convert.IsDBNull(dt.Rows[0]["TemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateId"];
					retObj._templateGUID					 = Convert.IsDBNull(dt.Rows[0]["TemplateGUID"]) ? null : (string)dt.Rows[0]["TemplateGUID"];
					retObj._templateName					 = Convert.IsDBNull(dt.Rows[0]["TemplateName"]) ? null : (string)dt.Rows[0]["TemplateName"];
					retObj._templateType					 = Convert.IsDBNull(dt.Rows[0]["TemplateType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TemplateType"];
					retObj._originSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceTypeId"];
					retObj._originSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceAPITemplateId"];
					retObj._originSourceFileTypeId					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OriginSourceFileTypeId"];
					retObj._originSourceServer					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceServer"]) ? null : (string)dt.Rows[0]["OriginSourceServer"];
					retObj._originSourcePort					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePort"]) ? null : (string)dt.Rows[0]["OriginSourcePort"];
					retObj._originSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceUsername"]) ? null : (string)dt.Rows[0]["OriginSourceUsername"];
					retObj._originSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["OriginSourcePassword"]) ? null : (string)dt.Rows[0]["OriginSourcePassword"];
					retObj._originSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceDatabase"]) ? null : (string)dt.Rows[0]["OriginSourceDatabase"];
					retObj._originSourceFilePath					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFilePath"]) ? null : (string)dt.Rows[0]["OriginSourceFilePath"];
					retObj._originSourceFileName					 = Convert.IsDBNull(dt.Rows[0]["OriginSourceFileName"]) ? null : (string)dt.Rows[0]["OriginSourceFileName"];
					retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(dt.Rows[0]["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFirstColumnContainHeader"]);
					retObj._targetSourceTypeId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceTypeId"];
					retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TargetSourceAPITemplateId"];
					retObj._targetSourceServer					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceServer"]) ? null : (string)dt.Rows[0]["TargetSourceServer"];
					retObj._targetSourcePort					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePort"]) ? null : (string)dt.Rows[0]["TargetSourcePort"];
					retObj._targetSourceUsername					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceUsername"]) ? null : (string)dt.Rows[0]["TargetSourceUsername"];
					retObj._targetSourcePassword					 = Convert.IsDBNull(dt.Rows[0]["TargetSourcePassword"]) ? null : (string)dt.Rows[0]["TargetSourcePassword"];
					retObj._targetSourceDatabase					 = Convert.IsDBNull(dt.Rows[0]["TargetSourceDatabase"]) ? null : (string)dt.Rows[0]["TargetSourceDatabase"];
					retObj._isScheduleEnabled					 = Convert.IsDBNull(dt.Rows[0]["IsScheduleEnabled"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsScheduleEnabled"]);
					retObj._scheduleType					 = Convert.IsDBNull(dt.Rows[0]["ScheduleType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ScheduleType"];
					retObj._frequencyType					 = Convert.IsDBNull(dt.Rows[0]["FrequencyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyType"];
					retObj._frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsDailyEveryDay"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsDailyEveryDay"];
					retObj._frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsWeeklyEveryWeek"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsWeeklyEveryWeek"];
					retObj._isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnMonday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnMonday"]);
					retObj._isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnTuesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnTuesday"]);
					retObj._isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnWednesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnWednesday"]);
					retObj._isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnThursday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnThursday"]);
					retObj._isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnFriday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnFriday"]);
					retObj._isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSaturday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSaturday"]);
					retObj._isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSunday"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsFrequencyRecurrsWeeklyOnSunday"]);
					retObj._frequencyRecurrsMonthlyType					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthlyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthlyType"];
					retObj._frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyEveryMonth"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyEveryMonth"];
					retObj._frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfMonth"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfMonth"];
					retObj._frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeekOccurance"];
					retObj._frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeek"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FrequencyRecurrsMonthtlyDayOfWeek"];
					retObj._dailyFrequencyType					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyType"];
					retObj._dailyFrequencyTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyTime"];
					retObj._dailyFrequencyOccuranceType					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceType"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyOccuranceType"];
					retObj._dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceEvery"]) ? (Int32?)null : (Int32?)dt.Rows[0]["DailyFrequencyOccuranceEvery"];
					retObj._dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceStartTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyOccuranceStartTime"];
					retObj._dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(dt.Rows[0]["DailyFrequencyOccuranceEndTime"]) ? (TimeSpan?)null : (TimeSpan?)dt.Rows[0]["DailyFrequencyOccuranceEndTime"];
					retObj._durationStartDate					 = Convert.IsDBNull(dt.Rows[0]["DurationStartDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DurationStartDate"];
					retObj._isDurationEndDateSpecified					 = Convert.IsDBNull(dt.Rows[0]["IsDurationEndDateSpecified"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDurationEndDateSpecified"]);
					retObj._durationEndDate					 = Convert.IsDBNull(dt.Rows[0]["DurationEndDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["DurationEndDate"];
					retObj._isActive					 = Convert.IsDBNull(dt.Rows[0]["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsActive"]);
					retObj._isDelete					 = Convert.IsDBNull(dt.Rows[0]["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(dt.Rows[0]["IsDelete"]);
					retObj._enteredBy					 = Convert.IsDBNull(dt.Rows[0]["EnteredBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EnteredBy"];
					retObj._enteredDate					 = Convert.IsDBNull(dt.Rows[0]["EnteredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["EnteredDate"];
					retObj._updatedBy					 = Convert.IsDBNull(dt.Rows[0]["UpdatedBy"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UpdatedBy"];
					retObj._updatedDate					 = Convert.IsDBNull(dt.Rows[0]["UpdatedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["UpdatedDate"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by unique constraint
		///This method deletes one row from the table Template based on a unique constraint
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string templateGUID
		///</parameters>
		public virtual void DeleteOneByTemplateGUID(string templateGUID)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_deleteonebytemplateguid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEGUID", MySqlDbType.VarChar, 64, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_templateGUID?? (object)DBNull.Value));

				command.ExecuteNonQuery();


			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Template
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATENAME", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateName));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateType));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceFileTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILEPATH", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFilePath));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILENAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFileName));
				command.Parameters.Add(new MySqlParameter("?P_ISFIRSTCOLUMNCONTAINHEADER", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFirstColumnContainHeader));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ISSCHEDULEENABLED", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isScheduleEnabled));
				command.Parameters.Add(new MySqlParameter("?P_SCHEDULETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _scheduleType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSDAILYEVERYDAY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsDailyEveryDay));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSWEEKLYEVERYWEEK", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsWeeklyEveryWeek));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONMONDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnMonday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnTuesday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnWednesday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnThursday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnFriday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnSaturday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnSunday));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHLYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthlyType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyEveryMonth));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfMonth));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfWeekOccurance));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfWeek));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyType));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyTime));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceType));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCEEVERY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceEvery));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCESTARTTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceStartTime));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCEENDTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceEndTime));
				command.Parameters.Add(new MySqlParameter("?P_DURATIONSTARTDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _durationStartDate));
				command.Parameters.Add(new MySqlParameter("?P_ISDURATIONENDDATESPECIFIED", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDurationEndDateSpecified));
				command.Parameters.Add(new MySqlParameter("?P_DURATIONENDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _durationEndDate));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_templateGUID					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEGUID"].Value) ? null : (string)command.Parameters["?P_TEMPLATEGUID"].Value;
				_templateName					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATENAME"].Value) ? null : (string)command.Parameters["?P_TEMPLATENAME"].Value;
				_templateType					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATETYPE"].Value;
				_originSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCETYPEID"].Value;
				_originSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value;
				_originSourceFileTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value;
				_originSourceServer					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCESERVER"].Value;
				_originSourcePort					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPORT"].Value;
				_originSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value;
				_originSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value;
				_originSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEDATABASE"].Value;
				_originSourceFilePath					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value;
				_originSourceFileName					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILENAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILENAME"].Value;
				_isFirstColumnContainHeader					 = Convert.IsDBNull(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value);
				_targetSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCETYPEID"].Value;
				_targetSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value;
				_targetSourceServer					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCESERVER"].Value;
				_targetSourcePort					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPORT"].Value;
				_targetSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEUSERNAME"].Value;
				_targetSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPASSWORD"].Value;
				_targetSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEDATABASE"].Value;
				_isScheduleEnabled					 = Convert.IsDBNull(command.Parameters["?P_ISSCHEDULEENABLED"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISSCHEDULEENABLED"].Value);
				_scheduleType					 = Convert.IsDBNull(command.Parameters["?P_SCHEDULETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_SCHEDULETYPE"].Value;
				_frequencyType					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYTYPE"].Value;
				_frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSDAILYEVERYDAY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSDAILYEVERYDAY"].Value;
				_frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSWEEKLYEVERYWEEK"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSWEEKLYEVERYWEEK"].Value;
				_isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONMONDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONMONDAY"].Value);
				_isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY"].Value);
				_isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY"].Value);
				_isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY"].Value);
				_isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY"].Value);
				_isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY"].Value);
				_isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY"].Value);
				_frequencyRecurrsMonthlyType					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHLYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHLYTYPE"].Value;
				_frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH"].Value;
				_frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH"].Value;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE"].Value;
				_frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK"].Value;
				_dailyFrequencyType					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYTYPE"].Value;
				_dailyFrequencyTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYTIME"].Value;
				_dailyFrequencyOccuranceType					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYOCCURANCETYPE"].Value;
				_dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCEEVERY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYOCCURANCEEVERY"].Value;
				_dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCESTARTTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYOCCURANCESTARTTIME"].Value;
				_dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCEENDTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYOCCURANCEENDTIME"].Value;
				_durationStartDate					 = Convert.IsDBNull(command.Parameters["?P_DURATIONSTARTDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_DURATIONSTARTDATE"].Value;
				_isDurationEndDateSpecified					 = Convert.IsDBNull(command.Parameters["?P_ISDURATIONENDDATESPECIFIED"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDURATIONENDDATESPECIFIED"].Value);
				_durationEndDate					 = Convert.IsDBNull(command.Parameters["?P_DURATIONENDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_DURATIONENDDATE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Template
		///</Summary>
		///<returns>
		///List-DLTemplate.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<DLTemplate> SelectAll()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Template");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLTemplate> objList = new List<DLTemplate>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLTemplate retObj = new DLTemplate();
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._templateGUID					 = Convert.IsDBNull(row["TemplateGUID"]) ? null : (string)row["TemplateGUID"];
						retObj._templateName					 = Convert.IsDBNull(row["TemplateName"]) ? null : (string)row["TemplateName"];
						retObj._templateType					 = Convert.IsDBNull(row["TemplateType"]) ? (Int32?)null : (Int32?)row["TemplateType"];
						retObj._originSourceTypeId					 = Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"];
						retObj._originSourceAPITemplateId					 = Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"];
						retObj._originSourceFileTypeId					 = Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"];
						retObj._originSourceServer					 = Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"];
						retObj._originSourcePort					 = Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"];
						retObj._originSourceUsername					 = Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"];
						retObj._originSourcePassword					 = Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"];
						retObj._originSourceDatabase					 = Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"];
						retObj._originSourceFilePath					 = Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"];
						retObj._originSourceFileName					 = Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"];
						retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]);
						retObj._targetSourceTypeId					 = Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"];
						retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"];
						retObj._targetSourceServer					 = Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"];
						retObj._targetSourcePort					 = Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"];
						retObj._targetSourceUsername					 = Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"];
						retObj._targetSourcePassword					 = Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"];
						retObj._targetSourceDatabase					 = Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"];
						retObj._isScheduleEnabled					 = Convert.IsDBNull(row["IsScheduleEnabled"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsScheduleEnabled"]);
						retObj._scheduleType					 = Convert.IsDBNull(row["ScheduleType"]) ? (Int32?)null : (Int32?)row["ScheduleType"];
						retObj._frequencyType					 = Convert.IsDBNull(row["FrequencyType"]) ? (Int32?)null : (Int32?)row["FrequencyType"];
						retObj._frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(row["FrequencyRecurrsDailyEveryDay"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsDailyEveryDay"];
						retObj._frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(row["FrequencyRecurrsWeeklyEveryWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsWeeklyEveryWeek"];
						retObj._isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnMonday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnMonday"]);
						retObj._isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnTuesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnTuesday"]);
						retObj._isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnWednesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnWednesday"]);
						retObj._isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnThursday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnThursday"]);
						retObj._isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnFriday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnFriday"]);
						retObj._isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSaturday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSaturday"]);
						retObj._isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSunday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSunday"]);
						retObj._frequencyRecurrsMonthlyType					 = Convert.IsDBNull(row["FrequencyRecurrsMonthlyType"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthlyType"];
						retObj._frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyEveryMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyEveryMonth"];
						retObj._frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfMonth"];
						retObj._frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"];
						retObj._frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeek"];
						retObj._dailyFrequencyType					 = Convert.IsDBNull(row["DailyFrequencyType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyType"];
						retObj._dailyFrequencyTime					 = Convert.IsDBNull(row["DailyFrequencyTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyTime"];
						retObj._dailyFrequencyOccuranceType					 = Convert.IsDBNull(row["DailyFrequencyOccuranceType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceType"];
						retObj._dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(row["DailyFrequencyOccuranceEvery"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceEvery"];
						retObj._dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(row["DailyFrequencyOccuranceStartTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceStartTime"];
						retObj._dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(row["DailyFrequencyOccuranceEndTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceEndTime"];
						retObj._durationStartDate					 = Convert.IsDBNull(row["DurationStartDate"]) ? (DateTime?)null : (DateTime?)row["DurationStartDate"];
						retObj._isDurationEndDateSpecified					 = Convert.IsDBNull(row["IsDurationEndDateSpecified"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDurationEndDateSpecified"]);
						retObj._durationEndDate					 = Convert.IsDBNull(row["DurationEndDate"]) ? (DateTime?)null : (DateTime?)row["DurationEndDate"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiTemplate
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Template");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_FIELDSFIELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "TemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"]);
						if (string.Compare(projection.Member, "TemplateGUID", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateGUID"]) ? null : (string)row["TemplateGUID"]);
						if (string.Compare(projection.Member, "TemplateName", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateName"]) ? null : (string)row["TemplateName"]);
						if (string.Compare(projection.Member, "TemplateType", true) == 0) lst.Add(Convert.IsDBNull(row["TemplateType"]) ? (Int32?)null : (Int32?)row["TemplateType"]);
						if (string.Compare(projection.Member, "OriginSourceTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"]);
						if (string.Compare(projection.Member, "OriginSourceAPITemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"]);
						if (string.Compare(projection.Member, "OriginSourceFileTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"]);
						if (string.Compare(projection.Member, "OriginSourceServer", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"]);
						if (string.Compare(projection.Member, "OriginSourcePort", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"]);
						if (string.Compare(projection.Member, "OriginSourceUsername", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"]);
						if (string.Compare(projection.Member, "OriginSourcePassword", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"]);
						if (string.Compare(projection.Member, "OriginSourceDatabase", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"]);
						if (string.Compare(projection.Member, "OriginSourceFilePath", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"]);
						if (string.Compare(projection.Member, "OriginSourceFileName", true) == 0) lst.Add(Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"]);
						if (string.Compare(projection.Member, "IsFirstColumnContainHeader", true) == 0) lst.Add(Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]));
						if (string.Compare(projection.Member, "TargetSourceTypeId", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"]);
						if (string.Compare(projection.Member, "TargetSourceAPITemplateId", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"]);
						if (string.Compare(projection.Member, "TargetSourceServer", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"]);
						if (string.Compare(projection.Member, "TargetSourcePort", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"]);
						if (string.Compare(projection.Member, "TargetSourceUsername", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"]);
						if (string.Compare(projection.Member, "TargetSourcePassword", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"]);
						if (string.Compare(projection.Member, "TargetSourceDatabase", true) == 0) lst.Add(Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"]);
						if (string.Compare(projection.Member, "IsScheduleEnabled", true) == 0) lst.Add(Convert.IsDBNull(row["IsScheduleEnabled"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsScheduleEnabled"]));
						if (string.Compare(projection.Member, "ScheduleType", true) == 0) lst.Add(Convert.IsDBNull(row["ScheduleType"]) ? (Int32?)null : (Int32?)row["ScheduleType"]);
						if (string.Compare(projection.Member, "FrequencyType", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyType"]) ? (Int32?)null : (Int32?)row["FrequencyType"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsDailyEveryDay", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsDailyEveryDay"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsDailyEveryDay"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsWeeklyEveryWeek", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsWeeklyEveryWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsWeeklyEveryWeek"]);
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnMonday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnMonday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnMonday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnTuesday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnTuesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnTuesday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnWednesday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnWednesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnWednesday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnThursday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnThursday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnThursday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnFriday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnFriday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnFriday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnSaturday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSaturday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSaturday"]));
						if (string.Compare(projection.Member, "IsFrequencyRecurrsWeeklyOnSunday", true) == 0) lst.Add(Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSunday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSunday"]));
						if (string.Compare(projection.Member, "FrequencyRecurrsMonthlyType", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsMonthlyType"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthlyType"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsMonthtlyEveryMonth", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsMonthtlyEveryMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyEveryMonth"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsMonthtlyDayOfMonth", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfMonth"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsMonthtlyDayOfWeekOccurance", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]);
						if (string.Compare(projection.Member, "FrequencyRecurrsMonthtlyDayOfWeek", true) == 0) lst.Add(Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeek"]);
						if (string.Compare(projection.Member, "DailyFrequencyType", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyType"]);
						if (string.Compare(projection.Member, "DailyFrequencyTime", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyTime"]);
						if (string.Compare(projection.Member, "DailyFrequencyOccuranceType", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyOccuranceType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceType"]);
						if (string.Compare(projection.Member, "DailyFrequencyOccuranceEvery", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyOccuranceEvery"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceEvery"]);
						if (string.Compare(projection.Member, "DailyFrequencyOccuranceStartTime", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyOccuranceStartTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceStartTime"]);
						if (string.Compare(projection.Member, "DailyFrequencyOccuranceEndTime", true) == 0) lst.Add(Convert.IsDBNull(row["DailyFrequencyOccuranceEndTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceEndTime"]);
						if (string.Compare(projection.Member, "DurationStartDate", true) == 0) lst.Add(Convert.IsDBNull(row["DurationStartDate"]) ? (DateTime?)null : (DateTime?)row["DurationStartDate"]);
						if (string.Compare(projection.Member, "IsDurationEndDateSpecified", true) == 0) lst.Add(Convert.IsDBNull(row["IsDurationEndDateSpecified"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDurationEndDateSpecified"]));
						if (string.Compare(projection.Member, "DurationEndDate", true) == 0) lst.Add(Convert.IsDBNull(row["DurationEndDate"]) ? (DateTime?)null : (DateTime?)row["DurationEndDate"]);
						if (string.Compare(projection.Member, "IsActive", true) == 0) lst.Add(Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]));
						if (string.Compare(projection.Member, "IsDelete", true) == 0) lst.Add(Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]));
						if (string.Compare(projection.Member, "EnteredBy", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"]);
						if (string.Compare(projection.Member, "EnteredDate", true) == 0) lst.Add(Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"]);
						if (string.Compare(projection.Member, "UpdatedBy", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"]);
						if (string.Compare(projection.Member, "UpdatedDate", true) == 0) lst.Add(Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Template
		///</Summary>
		///<returns>
		///List-DLTemplate.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<DLTemplate> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Template");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKIPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);


				List<DLTemplate> objList = new List<DLTemplate>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DLTemplate retObj = new DLTemplate();
						retObj._templateId					 = Convert.IsDBNull(row["TemplateId"]) ? (Int32?)null : (Int32?)row["TemplateId"];
						retObj._templateGUID					 = Convert.IsDBNull(row["TemplateGUID"]) ? null : (string)row["TemplateGUID"];
						retObj._templateName					 = Convert.IsDBNull(row["TemplateName"]) ? null : (string)row["TemplateName"];
						retObj._templateType					 = Convert.IsDBNull(row["TemplateType"]) ? (Int32?)null : (Int32?)row["TemplateType"];
						retObj._originSourceTypeId					 = Convert.IsDBNull(row["OriginSourceTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceTypeId"];
						retObj._originSourceAPITemplateId					 = Convert.IsDBNull(row["OriginSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["OriginSourceAPITemplateId"];
						retObj._originSourceFileTypeId					 = Convert.IsDBNull(row["OriginSourceFileTypeId"]) ? (Int32?)null : (Int32?)row["OriginSourceFileTypeId"];
						retObj._originSourceServer					 = Convert.IsDBNull(row["OriginSourceServer"]) ? null : (string)row["OriginSourceServer"];
						retObj._originSourcePort					 = Convert.IsDBNull(row["OriginSourcePort"]) ? null : (string)row["OriginSourcePort"];
						retObj._originSourceUsername					 = Convert.IsDBNull(row["OriginSourceUsername"]) ? null : (string)row["OriginSourceUsername"];
						retObj._originSourcePassword					 = Convert.IsDBNull(row["OriginSourcePassword"]) ? null : (string)row["OriginSourcePassword"];
						retObj._originSourceDatabase					 = Convert.IsDBNull(row["OriginSourceDatabase"]) ? null : (string)row["OriginSourceDatabase"];
						retObj._originSourceFilePath					 = Convert.IsDBNull(row["OriginSourceFilePath"]) ? null : (string)row["OriginSourceFilePath"];
						retObj._originSourceFileName					 = Convert.IsDBNull(row["OriginSourceFileName"]) ? null : (string)row["OriginSourceFileName"];
						retObj._isFirstColumnContainHeader					 = Convert.IsDBNull(row["IsFirstColumnContainHeader"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFirstColumnContainHeader"]);
						retObj._targetSourceTypeId					 = Convert.IsDBNull(row["TargetSourceTypeId"]) ? (Int32?)null : (Int32?)row["TargetSourceTypeId"];
						retObj._targetSourceAPITemplateId					 = Convert.IsDBNull(row["TargetSourceAPITemplateId"]) ? (Int32?)null : (Int32?)row["TargetSourceAPITemplateId"];
						retObj._targetSourceServer					 = Convert.IsDBNull(row["TargetSourceServer"]) ? null : (string)row["TargetSourceServer"];
						retObj._targetSourcePort					 = Convert.IsDBNull(row["TargetSourcePort"]) ? null : (string)row["TargetSourcePort"];
						retObj._targetSourceUsername					 = Convert.IsDBNull(row["TargetSourceUsername"]) ? null : (string)row["TargetSourceUsername"];
						retObj._targetSourcePassword					 = Convert.IsDBNull(row["TargetSourcePassword"]) ? null : (string)row["TargetSourcePassword"];
						retObj._targetSourceDatabase					 = Convert.IsDBNull(row["TargetSourceDatabase"]) ? null : (string)row["TargetSourceDatabase"];
						retObj._isScheduleEnabled					 = Convert.IsDBNull(row["IsScheduleEnabled"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsScheduleEnabled"]);
						retObj._scheduleType					 = Convert.IsDBNull(row["ScheduleType"]) ? (Int32?)null : (Int32?)row["ScheduleType"];
						retObj._frequencyType					 = Convert.IsDBNull(row["FrequencyType"]) ? (Int32?)null : (Int32?)row["FrequencyType"];
						retObj._frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(row["FrequencyRecurrsDailyEveryDay"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsDailyEveryDay"];
						retObj._frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(row["FrequencyRecurrsWeeklyEveryWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsWeeklyEveryWeek"];
						retObj._isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnMonday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnMonday"]);
						retObj._isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnTuesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnTuesday"]);
						retObj._isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnWednesday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnWednesday"]);
						retObj._isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnThursday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnThursday"]);
						retObj._isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnFriday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnFriday"]);
						retObj._isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSaturday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSaturday"]);
						retObj._isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(row["IsFrequencyRecurrsWeeklyOnSunday"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsFrequencyRecurrsWeeklyOnSunday"]);
						retObj._frequencyRecurrsMonthlyType					 = Convert.IsDBNull(row["FrequencyRecurrsMonthlyType"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthlyType"];
						retObj._frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyEveryMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyEveryMonth"];
						retObj._frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfMonth"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfMonth"];
						retObj._frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeekOccurance"];
						retObj._frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(row["FrequencyRecurrsMonthtlyDayOfWeek"]) ? (Int32?)null : (Int32?)row["FrequencyRecurrsMonthtlyDayOfWeek"];
						retObj._dailyFrequencyType					 = Convert.IsDBNull(row["DailyFrequencyType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyType"];
						retObj._dailyFrequencyTime					 = Convert.IsDBNull(row["DailyFrequencyTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyTime"];
						retObj._dailyFrequencyOccuranceType					 = Convert.IsDBNull(row["DailyFrequencyOccuranceType"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceType"];
						retObj._dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(row["DailyFrequencyOccuranceEvery"]) ? (Int32?)null : (Int32?)row["DailyFrequencyOccuranceEvery"];
						retObj._dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(row["DailyFrequencyOccuranceStartTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceStartTime"];
						retObj._dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(row["DailyFrequencyOccuranceEndTime"]) ? (TimeSpan?)null : (TimeSpan?)row["DailyFrequencyOccuranceEndTime"];
						retObj._durationStartDate					 = Convert.IsDBNull(row["DurationStartDate"]) ? (DateTime?)null : (DateTime?)row["DurationStartDate"];
						retObj._isDurationEndDateSpecified					 = Convert.IsDBNull(row["IsDurationEndDateSpecified"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDurationEndDateSpecified"]);
						retObj._durationEndDate					 = Convert.IsDBNull(row["DurationEndDate"]) ? (DateTime?)null : (DateTime?)row["DurationEndDate"];
						retObj._isActive					 = Convert.IsDBNull(row["IsActive"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsActive"]);
						retObj._isDelete					 = Convert.IsDBNull(row["IsDelete"]) ? (bool?)null : (bool?)Convert.ToBoolean(row["IsDelete"]);
						retObj._enteredBy					 = Convert.IsDBNull(row["EnteredBy"]) ? (Int32?)null : (Int32?)row["EnteredBy"];
						retObj._enteredDate					 = Convert.IsDBNull(row["EnteredDate"]) ? (DateTime?)null : (DateTime?)row["EnteredDate"];
						retObj._updatedBy					 = Convert.IsDBNull(row["UpdatedBy"]) ? (Int32?)null : (Int32?)row["UpdatedBy"];
						retObj._updatedDate					 = Convert.IsDBNull(row["UpdatedDate"]) ? (DateTime?)null : (DateTime?)row["UpdatedDate"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Template
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();

				return retCount;
			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Template based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "template_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateId));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATEGUID", MySqlDbType.VarChar, 64, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateGUID));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATENAME", MySqlDbType.VarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _templateName));
				command.Parameters.Add(new MySqlParameter("?P_TEMPLATETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _templateType));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _originSourceFileTypeId));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILEPATH", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFilePath));
				command.Parameters.Add(new MySqlParameter("?P_ORIGINSOURCEFILENAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _originSourceFileName));
				command.Parameters.Add(new MySqlParameter("?P_ISFIRSTCOLUMNCONTAINHEADER", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFirstColumnContainHeader));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCETYPEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceTypeId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEAPITEMPLATEID", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetSourceAPITemplateId));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCESERVER", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceServer));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPORT", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePort));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEUSERNAME", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceUsername));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEPASSWORD", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourcePassword));
				command.Parameters.Add(new MySqlParameter("?P_TARGETSOURCEDATABASE", MySqlDbType.VarChar, 300, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _targetSourceDatabase));
				command.Parameters.Add(new MySqlParameter("?P_ISSCHEDULEENABLED", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isScheduleEnabled));
				command.Parameters.Add(new MySqlParameter("?P_SCHEDULETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _scheduleType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSDAILYEVERYDAY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsDailyEveryDay));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSWEEKLYEVERYWEEK", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsWeeklyEveryWeek));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONMONDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnMonday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnTuesday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnWednesday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnThursday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnFriday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnSaturday));
				command.Parameters.Add(new MySqlParameter("?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isFrequencyRecurrsWeeklyOnSunday));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHLYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthlyType));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyEveryMonth));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfMonth));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfWeekOccurance));
				command.Parameters.Add(new MySqlParameter("?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _frequencyRecurrsMonthtlyDayOfWeek));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYTYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyType));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyTime));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCETYPE", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceType));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCEEVERY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceEvery));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCESTARTTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceStartTime));
				command.Parameters.Add(new MySqlParameter("?P_DAILYFREQUENCYOCCURANCEENDTIME", MySqlDbType.Time, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dailyFrequencyOccuranceEndTime));
				command.Parameters.Add(new MySqlParameter("?P_DURATIONSTARTDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _durationStartDate));
				command.Parameters.Add(new MySqlParameter("?P_ISDURATIONENDDATESPECIFIED", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDurationEndDateSpecified));
				command.Parameters.Add(new MySqlParameter("?P_DURATIONENDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _durationEndDate));
				command.Parameters.Add(new MySqlParameter("?P_ISACTIVE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isActive));
				command.Parameters.Add(new MySqlParameter("?P_ISDELETE", MySqlDbType.Bit, 0, ParameterDirection.InputOutput, true, 1, 0, "", DataRowVersion.Proposed, _isDelete));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _enteredBy));
				command.Parameters.Add(new MySqlParameter("?P_ENTEREDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _enteredDate));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDBY", MySqlDbType.Int32, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _updatedBy));
				command.Parameters.Add(new MySqlParameter("?P_UPDATEDDATE", MySqlDbType.DateTime, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _updatedDate));

				command.ExecuteNonQuery();

				_templateId					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATEID"].Value;
				_templateGUID					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATEGUID"].Value) ? null : (string)command.Parameters["?P_TEMPLATEGUID"].Value;
				_templateName					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATENAME"].Value) ? null : (string)command.Parameters["?P_TEMPLATENAME"].Value;
				_templateType					 = Convert.IsDBNull(command.Parameters["?P_TEMPLATETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TEMPLATETYPE"].Value;
				_originSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCETYPEID"].Value;
				_originSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEAPITEMPLATEID"].Value;
				_originSourceFileTypeId					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ORIGINSOURCEFILETYPEID"].Value;
				_originSourceServer					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCESERVER"].Value;
				_originSourcePort					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPORT"].Value;
				_originSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEUSERNAME"].Value;
				_originSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEPASSWORD"].Value;
				_originSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEDATABASE"].Value;
				_originSourceFilePath					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILEPATH"].Value;
				_originSourceFileName					 = Convert.IsDBNull(command.Parameters["?P_ORIGINSOURCEFILENAME"].Value) ? null : (string)command.Parameters["?P_ORIGINSOURCEFILENAME"].Value;
				_isFirstColumnContainHeader					 = Convert.IsDBNull(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFIRSTCOLUMNCONTAINHEADER"].Value);
				_targetSourceTypeId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCETYPEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCETYPEID"].Value;
				_targetSourceAPITemplateId					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_TARGETSOURCEAPITEMPLATEID"].Value;
				_targetSourceServer					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCESERVER"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCESERVER"].Value;
				_targetSourcePort					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPORT"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPORT"].Value;
				_targetSourceUsername					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEUSERNAME"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEUSERNAME"].Value;
				_targetSourcePassword					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEPASSWORD"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEPASSWORD"].Value;
				_targetSourceDatabase					 = Convert.IsDBNull(command.Parameters["?P_TARGETSOURCEDATABASE"].Value) ? null : (string)command.Parameters["?P_TARGETSOURCEDATABASE"].Value;
				_isScheduleEnabled					 = Convert.IsDBNull(command.Parameters["?P_ISSCHEDULEENABLED"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISSCHEDULEENABLED"].Value);
				_scheduleType					 = Convert.IsDBNull(command.Parameters["?P_SCHEDULETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_SCHEDULETYPE"].Value;
				_frequencyType					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYTYPE"].Value;
				_frequencyRecurrsDailyEveryDay					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSDAILYEVERYDAY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSDAILYEVERYDAY"].Value;
				_frequencyRecurrsWeeklyEveryWeek					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSWEEKLYEVERYWEEK"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSWEEKLYEVERYWEEK"].Value;
				_isFrequencyRecurrsWeeklyOnMonday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONMONDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONMONDAY"].Value);
				_isFrequencyRecurrsWeeklyOnTuesday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTUESDAY"].Value);
				_isFrequencyRecurrsWeeklyOnWednesday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONWEDNESDAY"].Value);
				_isFrequencyRecurrsWeeklyOnThursday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONTHURSDAY"].Value);
				_isFrequencyRecurrsWeeklyOnFriday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONFRIDAY"].Value);
				_isFrequencyRecurrsWeeklyOnSaturday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSATURDAY"].Value);
				_isFrequencyRecurrsWeeklyOnSunday					 = Convert.IsDBNull(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISFREQUENCYRECURRSWEEKLYONSUNDAY"].Value);
				_frequencyRecurrsMonthlyType					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHLYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHLYTYPE"].Value;
				_frequencyRecurrsMonthtlyEveryMonth					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYEVERYMONTH"].Value;
				_frequencyRecurrsMonthtlyDayOfMonth					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFMONTH"].Value;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEKOCCURANCE"].Value;
				_frequencyRecurrsMonthtlyDayOfWeek					 = Convert.IsDBNull(command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_FREQUENCYRECURRSMONTHTLYDAYOFWEEK"].Value;
				_dailyFrequencyType					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYTYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYTYPE"].Value;
				_dailyFrequencyTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYTIME"].Value;
				_dailyFrequencyOccuranceType					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCETYPE"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYOCCURANCETYPE"].Value;
				_dailyFrequencyOccuranceEvery					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCEEVERY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_DAILYFREQUENCYOCCURANCEEVERY"].Value;
				_dailyFrequencyOccuranceStartTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCESTARTTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYOCCURANCESTARTTIME"].Value;
				_dailyFrequencyOccuranceEndTime					 = Convert.IsDBNull(command.Parameters["?P_DAILYFREQUENCYOCCURANCEENDTIME"].Value) ? (TimeSpan?)null : (TimeSpan?)command.Parameters["?P_DAILYFREQUENCYOCCURANCEENDTIME"].Value;
				_durationStartDate					 = Convert.IsDBNull(command.Parameters["?P_DURATIONSTARTDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_DURATIONSTARTDATE"].Value;
				_isDurationEndDateSpecified					 = Convert.IsDBNull(command.Parameters["?P_ISDURATIONENDDATESPECIFIED"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDURATIONENDDATESPECIFIED"].Value);
				_durationEndDate					 = Convert.IsDBNull(command.Parameters["?P_DURATIONENDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_DURATIONENDDATE"].Value;
				_isActive					 = Convert.IsDBNull(command.Parameters["?P_ISACTIVE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISACTIVE"].Value);
				_isDelete					 = Convert.IsDBNull(command.Parameters["?P_ISDELETE"].Value) ? (bool?)null : (bool?)Convert.ToBoolean(command.Parameters["?P_ISDELETE"].Value);
				_enteredBy					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_ENTEREDBY"].Value;
				_enteredDate					 = Convert.IsDBNull(command.Parameters["?P_ENTEREDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_ENTEREDDATE"].Value;
				_updatedBy					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDBY"].Value) ? (Int32?)null : (Int32?)command.Parameters["?P_UPDATEDBY"].Value;
				_updatedDate					 = Convert.IsDBNull(command.Parameters["?P_UPDATEDDATE"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["?P_UPDATEDDATE"].Value;

			}
			catch(Exception ex)
			{
				Exception map = MapException(ex);
				if(map != null) throw map; 
				else throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public Int32? TemplateId
		{
			get
			{
				return _templateId;
			}
			set
			{
				_templateId = value;
			}
		}
		public string TemplateGUID
		{
			get
			{
				return _templateGUID;
			}
			set
			{
				_templateGUID = value;
			}
		}
		public string TemplateName
		{
			get
			{
				return _templateName;
			}
			set
			{
				_templateName = value;
			}
		}
		public Int32? TemplateType
		{
			get
			{
				return _templateType;
			}
			set
			{
				_templateType = value;
			}
		}
		public Int32? OriginSourceTypeId
		{
			get
			{
				return _originSourceTypeId;
			}
			set
			{
				_originSourceTypeId = value;
			}
		}
		public Int32? OriginSourceAPITemplateId
		{
			get
			{
				return _originSourceAPITemplateId;
			}
			set
			{
				_originSourceAPITemplateId = value;
			}
		}
		public Int32? OriginSourceFileTypeId
		{
			get
			{
				return _originSourceFileTypeId;
			}
			set
			{
				_originSourceFileTypeId = value;
			}
		}
		public string OriginSourceServer
		{
			get
			{
				return _originSourceServer;
			}
			set
			{
				_originSourceServer = value;
			}
		}
		public string OriginSourcePort
		{
			get
			{
				return _originSourcePort;
			}
			set
			{
				_originSourcePort = value;
			}
		}
		public string OriginSourceUsername
		{
			get
			{
				return _originSourceUsername;
			}
			set
			{
				_originSourceUsername = value;
			}
		}
		public string OriginSourcePassword
		{
			get
			{
				return _originSourcePassword;
			}
			set
			{
				_originSourcePassword = value;
			}
		}
		public string OriginSourceDatabase
		{
			get
			{
				return _originSourceDatabase;
			}
			set
			{
				_originSourceDatabase = value;
			}
		}
		public string OriginSourceFilePath
		{
			get
			{
				return _originSourceFilePath;
			}
			set
			{
				_originSourceFilePath = value;
			}
		}
		public string OriginSourceFileName
		{
			get
			{
				return _originSourceFileName;
			}
			set
			{
				_originSourceFileName = value;
			}
		}
		public bool? IsFirstColumnContainHeader
		{
			get
			{
				return _isFirstColumnContainHeader;
			}
			set
			{
				_isFirstColumnContainHeader = value;
			}
		}
		public Int32? TargetSourceTypeId
		{
			get
			{
				return _targetSourceTypeId;
			}
			set
			{
				_targetSourceTypeId = value;
			}
		}
		public Int32? TargetSourceAPITemplateId
		{
			get
			{
				return _targetSourceAPITemplateId;
			}
			set
			{
				_targetSourceAPITemplateId = value;
			}
		}
		public string TargetSourceServer
		{
			get
			{
				return _targetSourceServer;
			}
			set
			{
				_targetSourceServer = value;
			}
		}
		public string TargetSourcePort
		{
			get
			{
				return _targetSourcePort;
			}
			set
			{
				_targetSourcePort = value;
			}
		}
		public string TargetSourceUsername
		{
			get
			{
				return _targetSourceUsername;
			}
			set
			{
				_targetSourceUsername = value;
			}
		}
		public string TargetSourcePassword
		{
			get
			{
				return _targetSourcePassword;
			}
			set
			{
				_targetSourcePassword = value;
			}
		}
		public string TargetSourceDatabase
		{
			get
			{
				return _targetSourceDatabase;
			}
			set
			{
				_targetSourceDatabase = value;
			}
		}
		public bool? IsScheduleEnabled
		{
			get
			{
				return _isScheduleEnabled;
			}
			set
			{
				_isScheduleEnabled = value;
			}
		}
		public Int32? ScheduleType
		{
			get
			{
				return _scheduleType;
			}
			set
			{
				_scheduleType = value;
			}
		}
		public Int32? FrequencyType
		{
			get
			{
				return _frequencyType;
			}
			set
			{
				_frequencyType = value;
			}
		}
		public Int32? FrequencyRecurrsDailyEveryDay
		{
			get
			{
				return _frequencyRecurrsDailyEveryDay;
			}
			set
			{
				_frequencyRecurrsDailyEveryDay = value;
			}
		}
		public Int32? FrequencyRecurrsWeeklyEveryWeek
		{
			get
			{
				return _frequencyRecurrsWeeklyEveryWeek;
			}
			set
			{
				_frequencyRecurrsWeeklyEveryWeek = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnMonday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnMonday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnMonday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnTuesday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnTuesday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnTuesday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnWednesday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnWednesday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnWednesday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnThursday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnThursday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnThursday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnFriday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnFriday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnFriday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnSaturday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnSaturday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnSaturday = value;
			}
		}
		public bool? IsFrequencyRecurrsWeeklyOnSunday
		{
			get
			{
				return _isFrequencyRecurrsWeeklyOnSunday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnSunday = value;
			}
		}
		public Int32? FrequencyRecurrsMonthlyType
		{
			get
			{
				return _frequencyRecurrsMonthlyType;
			}
			set
			{
				_frequencyRecurrsMonthlyType = value;
			}
		}
		public Int32? FrequencyRecurrsMonthtlyEveryMonth
		{
			get
			{
				return _frequencyRecurrsMonthtlyEveryMonth;
			}
			set
			{
				_frequencyRecurrsMonthtlyEveryMonth = value;
			}
		}
		public Int32? FrequencyRecurrsMonthtlyDayOfMonth
		{
			get
			{
				return _frequencyRecurrsMonthtlyDayOfMonth;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfMonth = value;
			}
		}
		public Int32? FrequencyRecurrsMonthtlyDayOfWeekOccurance
		{
			get
			{
				return _frequencyRecurrsMonthtlyDayOfWeekOccurance;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = value;
			}
		}
		public Int32? FrequencyRecurrsMonthtlyDayOfWeek
		{
			get
			{
				return _frequencyRecurrsMonthtlyDayOfWeek;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfWeek = value;
			}
		}
		public Int32? DailyFrequencyType
		{
			get
			{
				return _dailyFrequencyType;
			}
			set
			{
				_dailyFrequencyType = value;
			}
		}
		public TimeSpan? DailyFrequencyTime
		{
			get
			{
				return _dailyFrequencyTime;
			}
			set
			{
				_dailyFrequencyTime = value;
			}
		}
		public Int32? DailyFrequencyOccuranceType
		{
			get
			{
				return _dailyFrequencyOccuranceType;
			}
			set
			{
				_dailyFrequencyOccuranceType = value;
			}
		}
		public Int32? DailyFrequencyOccuranceEvery
		{
			get
			{
				return _dailyFrequencyOccuranceEvery;
			}
			set
			{
				_dailyFrequencyOccuranceEvery = value;
			}
		}
		public TimeSpan? DailyFrequencyOccuranceStartTime
		{
			get
			{
				return _dailyFrequencyOccuranceStartTime;
			}
			set
			{
				_dailyFrequencyOccuranceStartTime = value;
			}
		}
		public TimeSpan? DailyFrequencyOccuranceEndTime
		{
			get
			{
				return _dailyFrequencyOccuranceEndTime;
			}
			set
			{
				_dailyFrequencyOccuranceEndTime = value;
			}
		}
		public DateTime? DurationStartDate
		{
			get
			{
				return _durationStartDate;
			}
			set
			{
				_durationStartDate = value;
			}
		}
		public bool? IsDurationEndDateSpecified
		{
			get
			{
				return _isDurationEndDateSpecified;
			}
			set
			{
				_isDurationEndDateSpecified = value;
			}
		}
		public DateTime? DurationEndDate
		{
			get
			{
				return _durationEndDate;
			}
			set
			{
				_durationEndDate = value;
			}
		}
		public bool? IsActive
		{
			get
			{
				return _isActive;
			}
			set
			{
				_isActive = value;
			}
		}
		public bool? IsDelete
		{
			get
			{
				return _isDelete;
			}
			set
			{
				_isDelete = value;
			}
		}
		public Int32? EnteredBy
		{
			get
			{
				return _enteredBy;
			}
			set
			{
				_enteredBy = value;
			}
		}
		public DateTime? EnteredDate
		{
			get
			{
				return _enteredDate;
			}
			set
			{
				_enteredDate = value;
			}
		}
		public Int32? UpdatedBy
		{
			get
			{
				return _updatedBy;
			}
			set
			{
				_updatedBy = value;
			}
		}
		public DateTime? UpdatedDate
		{
			get
			{
				return _updatedDate;
			}
			set
			{
				_updatedDate = value;
			}
		}
		#endregion
	}
}
