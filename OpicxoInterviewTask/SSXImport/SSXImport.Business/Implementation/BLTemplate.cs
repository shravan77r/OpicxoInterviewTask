/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLTemplate.
	///</Summary>
	public partial class BLTemplate : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _templateId;
		protected string _templateGUID;
		protected string _templateName;
		protected Int32? _templateType;
		protected Int32? _originSourceTypeId;
		protected Int32? _originSourceAPITemplateId;
		protected Int32? _originSourceFileTypeId;
		protected string _originSourceServer;
		protected string _originSourcePort;
		protected string _originSourceUsername;
		protected string _originSourcePassword;
		protected string _originSourceDatabase;
		protected string _originSourceFilePath;
		protected string _originSourceFileName;
		protected bool? _isFirstColumnContainHeader;
		protected Int32? _targetSourceTypeId;
		protected Int32? _targetSourceAPITemplateId;
		protected string _targetSourceServer;
		protected string _targetSourcePort;
		protected string _targetSourceUsername;
		protected string _targetSourcePassword;
		protected string _targetSourceDatabase;
		protected bool? _isScheduleEnabled;
		protected Int32? _scheduleType;
		protected Int32? _frequencyType;
		protected Int32? _frequencyRecurrsDailyEveryDay;
		protected Int32? _frequencyRecurrsWeeklyEveryWeek;
		protected bool? _isFrequencyRecurrsWeeklyOnMonday;
		protected bool? _isFrequencyRecurrsWeeklyOnTuesday;
		protected bool? _isFrequencyRecurrsWeeklyOnWednesday;
		protected bool? _isFrequencyRecurrsWeeklyOnThursday;
		protected bool? _isFrequencyRecurrsWeeklyOnFriday;
		protected bool? _isFrequencyRecurrsWeeklyOnSaturday;
		protected bool? _isFrequencyRecurrsWeeklyOnSunday;
		protected Int32? _frequencyRecurrsMonthlyType;
		protected Int32? _frequencyRecurrsMonthtlyEveryMonth;
		protected Int32? _frequencyRecurrsMonthtlyDayOfMonth;
		protected Int32? _frequencyRecurrsMonthtlyDayOfWeekOccurance;
		protected Int32? _frequencyRecurrsMonthtlyDayOfWeek;
		protected Int32? _dailyFrequencyType;
		protected TimeSpan? _dailyFrequencyTime;
		protected Int32? _dailyFrequencyOccuranceType;
		protected Int32? _dailyFrequencyOccuranceEvery;
		protected TimeSpan? _dailyFrequencyOccuranceStartTime;
		protected TimeSpan? _dailyFrequencyOccuranceEndTime;
		protected DateTime? _durationStartDate;
		protected bool? _isDurationEndDateSpecified;
		protected DateTime? _durationEndDate;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLTemplate()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 templateId
		///</parameters>
		public BLTemplate(Int32 templateId)
		{
			try
			{
				DLTemplate dlTemplate = DLTemplate.SelectOne(templateId);
				_templateId = dlTemplate.TemplateId;
				_templateGUID = dlTemplate.TemplateGUID;
				_templateName = dlTemplate.TemplateName;
				_templateType = dlTemplate.TemplateType;
				_originSourceTypeId = dlTemplate.OriginSourceTypeId;
				_originSourceAPITemplateId = dlTemplate.OriginSourceAPITemplateId;
				_originSourceFileTypeId = dlTemplate.OriginSourceFileTypeId;
				_originSourceServer = dlTemplate.OriginSourceServer;
				_originSourcePort = dlTemplate.OriginSourcePort;
				_originSourceUsername = dlTemplate.OriginSourceUsername;
				_originSourcePassword = dlTemplate.OriginSourcePassword;
				_originSourceDatabase = dlTemplate.OriginSourceDatabase;
				_originSourceFilePath = dlTemplate.OriginSourceFilePath;
				_originSourceFileName = dlTemplate.OriginSourceFileName;
				_isFirstColumnContainHeader = dlTemplate.IsFirstColumnContainHeader;
				_targetSourceTypeId = dlTemplate.TargetSourceTypeId;
				_targetSourceAPITemplateId = dlTemplate.TargetSourceAPITemplateId;
				_targetSourceServer = dlTemplate.TargetSourceServer;
				_targetSourcePort = dlTemplate.TargetSourcePort;
				_targetSourceUsername = dlTemplate.TargetSourceUsername;
				_targetSourcePassword = dlTemplate.TargetSourcePassword;
				_targetSourceDatabase = dlTemplate.TargetSourceDatabase;
				_isScheduleEnabled = dlTemplate.IsScheduleEnabled;
				_scheduleType = dlTemplate.ScheduleType;
				_frequencyType = dlTemplate.FrequencyType;
				_frequencyRecurrsDailyEveryDay = dlTemplate.FrequencyRecurrsDailyEveryDay;
				_frequencyRecurrsWeeklyEveryWeek = dlTemplate.FrequencyRecurrsWeeklyEveryWeek;
				_isFrequencyRecurrsWeeklyOnMonday = dlTemplate.IsFrequencyRecurrsWeeklyOnMonday;
				_isFrequencyRecurrsWeeklyOnTuesday = dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday;
				_isFrequencyRecurrsWeeklyOnWednesday = dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday;
				_isFrequencyRecurrsWeeklyOnThursday = dlTemplate.IsFrequencyRecurrsWeeklyOnThursday;
				_isFrequencyRecurrsWeeklyOnFriday = dlTemplate.IsFrequencyRecurrsWeeklyOnFriday;
				_isFrequencyRecurrsWeeklyOnSaturday = dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday;
				_isFrequencyRecurrsWeeklyOnSunday = dlTemplate.IsFrequencyRecurrsWeeklyOnSunday;
				_frequencyRecurrsMonthlyType = dlTemplate.FrequencyRecurrsMonthlyType;
				_frequencyRecurrsMonthtlyEveryMonth = dlTemplate.FrequencyRecurrsMonthtlyEveryMonth;
				_frequencyRecurrsMonthtlyDayOfMonth = dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance;
				_frequencyRecurrsMonthtlyDayOfWeek = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek;
				_dailyFrequencyType = dlTemplate.DailyFrequencyType;
				_dailyFrequencyTime = dlTemplate.DailyFrequencyTime;
				_dailyFrequencyOccuranceType = dlTemplate.DailyFrequencyOccuranceType;
				_dailyFrequencyOccuranceEvery = dlTemplate.DailyFrequencyOccuranceEvery;
				_dailyFrequencyOccuranceStartTime = dlTemplate.DailyFrequencyOccuranceStartTime;
				_dailyFrequencyOccuranceEndTime = dlTemplate.DailyFrequencyOccuranceEndTime;
				_durationStartDate = dlTemplate.DurationStartDate;
				_isDurationEndDateSpecified = dlTemplate.IsDurationEndDateSpecified;
				_durationEndDate = dlTemplate.DurationEndDate;
				_isActive = dlTemplate.IsActive;
				_isDelete = dlTemplate.IsDelete;
				_enteredBy = dlTemplate.EnteredBy;
				_enteredDate = dlTemplate.EnteredDate;
				_updatedBy = dlTemplate.UpdatedBy;
				_updatedDate = dlTemplate.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///TemplateGUID
		///</parameters>
		public BLTemplate(string templateGUID)
		{
			try
			{
				DLTemplate dlTemplate = DLTemplate.SelectOneByTemplateGUID(templateGUID);
				_templateId = dlTemplate.TemplateId;
				_templateGUID = dlTemplate.TemplateGUID;
				_templateName = dlTemplate.TemplateName;
				_templateType = dlTemplate.TemplateType;
				_originSourceTypeId = dlTemplate.OriginSourceTypeId;
				_originSourceAPITemplateId = dlTemplate.OriginSourceAPITemplateId;
				_originSourceFileTypeId = dlTemplate.OriginSourceFileTypeId;
				_originSourceServer = dlTemplate.OriginSourceServer;
				_originSourcePort = dlTemplate.OriginSourcePort;
				_originSourceUsername = dlTemplate.OriginSourceUsername;
				_originSourcePassword = dlTemplate.OriginSourcePassword;
				_originSourceDatabase = dlTemplate.OriginSourceDatabase;
				_originSourceFilePath = dlTemplate.OriginSourceFilePath;
				_originSourceFileName = dlTemplate.OriginSourceFileName;
				_isFirstColumnContainHeader = dlTemplate.IsFirstColumnContainHeader;
				_targetSourceTypeId = dlTemplate.TargetSourceTypeId;
				_targetSourceAPITemplateId = dlTemplate.TargetSourceAPITemplateId;
				_targetSourceServer = dlTemplate.TargetSourceServer;
				_targetSourcePort = dlTemplate.TargetSourcePort;
				_targetSourceUsername = dlTemplate.TargetSourceUsername;
				_targetSourcePassword = dlTemplate.TargetSourcePassword;
				_targetSourceDatabase = dlTemplate.TargetSourceDatabase;
				_isScheduleEnabled = dlTemplate.IsScheduleEnabled;
				_scheduleType = dlTemplate.ScheduleType;
				_frequencyType = dlTemplate.FrequencyType;
				_frequencyRecurrsDailyEveryDay = dlTemplate.FrequencyRecurrsDailyEveryDay;
				_frequencyRecurrsWeeklyEveryWeek = dlTemplate.FrequencyRecurrsWeeklyEveryWeek;
				_isFrequencyRecurrsWeeklyOnMonday = dlTemplate.IsFrequencyRecurrsWeeklyOnMonday;
				_isFrequencyRecurrsWeeklyOnTuesday = dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday;
				_isFrequencyRecurrsWeeklyOnWednesday = dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday;
				_isFrequencyRecurrsWeeklyOnThursday = dlTemplate.IsFrequencyRecurrsWeeklyOnThursday;
				_isFrequencyRecurrsWeeklyOnFriday = dlTemplate.IsFrequencyRecurrsWeeklyOnFriday;
				_isFrequencyRecurrsWeeklyOnSaturday = dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday;
				_isFrequencyRecurrsWeeklyOnSunday = dlTemplate.IsFrequencyRecurrsWeeklyOnSunday;
				_frequencyRecurrsMonthlyType = dlTemplate.FrequencyRecurrsMonthlyType;
				_frequencyRecurrsMonthtlyEveryMonth = dlTemplate.FrequencyRecurrsMonthtlyEveryMonth;
				_frequencyRecurrsMonthtlyDayOfMonth = dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance;
				_frequencyRecurrsMonthtlyDayOfWeek = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek;
				_dailyFrequencyType = dlTemplate.DailyFrequencyType;
				_dailyFrequencyTime = dlTemplate.DailyFrequencyTime;
				_dailyFrequencyOccuranceType = dlTemplate.DailyFrequencyOccuranceType;
				_dailyFrequencyOccuranceEvery = dlTemplate.DailyFrequencyOccuranceEvery;
				_dailyFrequencyOccuranceStartTime = dlTemplate.DailyFrequencyOccuranceStartTime;
				_dailyFrequencyOccuranceEndTime = dlTemplate.DailyFrequencyOccuranceEndTime;
				_durationStartDate = dlTemplate.DurationStartDate;
				_isDurationEndDateSpecified = dlTemplate.IsDurationEndDateSpecified;
				_durationEndDate = dlTemplate.DurationEndDate;
				_isActive = dlTemplate.IsActive;
				_isDelete = dlTemplate.IsDelete;
				_enteredBy = dlTemplate.EnteredBy;
				_enteredDate = dlTemplate.EnteredDate;
				_updatedBy = dlTemplate.UpdatedBy;
				_updatedDate = dlTemplate.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLTemplate
		///</parameters>
		protected internal BLTemplate(DLTemplate dlTemplate)
		{
			try
			{
				_templateId = dlTemplate.TemplateId;
				_templateGUID = dlTemplate.TemplateGUID;
				_templateName = dlTemplate.TemplateName;
				_templateType = dlTemplate.TemplateType;
				_originSourceTypeId = dlTemplate.OriginSourceTypeId;
				_originSourceAPITemplateId = dlTemplate.OriginSourceAPITemplateId;
				_originSourceFileTypeId = dlTemplate.OriginSourceFileTypeId;
				_originSourceServer = dlTemplate.OriginSourceServer;
				_originSourcePort = dlTemplate.OriginSourcePort;
				_originSourceUsername = dlTemplate.OriginSourceUsername;
				_originSourcePassword = dlTemplate.OriginSourcePassword;
				_originSourceDatabase = dlTemplate.OriginSourceDatabase;
				_originSourceFilePath = dlTemplate.OriginSourceFilePath;
				_originSourceFileName = dlTemplate.OriginSourceFileName;
				_isFirstColumnContainHeader = dlTemplate.IsFirstColumnContainHeader;
				_targetSourceTypeId = dlTemplate.TargetSourceTypeId;
				_targetSourceAPITemplateId = dlTemplate.TargetSourceAPITemplateId;
				_targetSourceServer = dlTemplate.TargetSourceServer;
				_targetSourcePort = dlTemplate.TargetSourcePort;
				_targetSourceUsername = dlTemplate.TargetSourceUsername;
				_targetSourcePassword = dlTemplate.TargetSourcePassword;
				_targetSourceDatabase = dlTemplate.TargetSourceDatabase;
				_isScheduleEnabled = dlTemplate.IsScheduleEnabled;
				_scheduleType = dlTemplate.ScheduleType;
				_frequencyType = dlTemplate.FrequencyType;
				_frequencyRecurrsDailyEveryDay = dlTemplate.FrequencyRecurrsDailyEveryDay;
				_frequencyRecurrsWeeklyEveryWeek = dlTemplate.FrequencyRecurrsWeeklyEveryWeek;
				_isFrequencyRecurrsWeeklyOnMonday = dlTemplate.IsFrequencyRecurrsWeeklyOnMonday;
				_isFrequencyRecurrsWeeklyOnTuesday = dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday;
				_isFrequencyRecurrsWeeklyOnWednesday = dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday;
				_isFrequencyRecurrsWeeklyOnThursday = dlTemplate.IsFrequencyRecurrsWeeklyOnThursday;
				_isFrequencyRecurrsWeeklyOnFriday = dlTemplate.IsFrequencyRecurrsWeeklyOnFriday;
				_isFrequencyRecurrsWeeklyOnSaturday = dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday;
				_isFrequencyRecurrsWeeklyOnSunday = dlTemplate.IsFrequencyRecurrsWeeklyOnSunday;
				_frequencyRecurrsMonthlyType = dlTemplate.FrequencyRecurrsMonthlyType;
				_frequencyRecurrsMonthtlyEveryMonth = dlTemplate.FrequencyRecurrsMonthtlyEveryMonth;
				_frequencyRecurrsMonthtlyDayOfMonth = dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance;
				_frequencyRecurrsMonthtlyDayOfWeek = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek;
				_dailyFrequencyType = dlTemplate.DailyFrequencyType;
				_dailyFrequencyTime = dlTemplate.DailyFrequencyTime;
				_dailyFrequencyOccuranceType = dlTemplate.DailyFrequencyOccuranceType;
				_dailyFrequencyOccuranceEvery = dlTemplate.DailyFrequencyOccuranceEvery;
				_dailyFrequencyOccuranceStartTime = dlTemplate.DailyFrequencyOccuranceStartTime;
				_dailyFrequencyOccuranceEndTime = dlTemplate.DailyFrequencyOccuranceEndTime;
				_durationStartDate = dlTemplate.DurationStartDate;
				_isDurationEndDateSpecified = dlTemplate.IsDurationEndDateSpecified;
				_durationEndDate = dlTemplate.DurationEndDate;
				_isActive = dlTemplate.IsActive;
				_isDelete = dlTemplate.IsDelete;
				_enteredBy = dlTemplate.EnteredBy;
				_enteredDate = dlTemplate.EnteredDate;
				_updatedBy = dlTemplate.UpdatedBy;
				_updatedDate = dlTemplate.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Template record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLTemplate dlTemplate = new DLTemplate();
			RegisterDataObject(dlTemplate);
			BeginTransaction("savenewBLTemplate");
			try
			{
				dlTemplate.TemplateGUID = _templateGUID;
				dlTemplate.TemplateName = _templateName;
				dlTemplate.TemplateType = _templateType;
				dlTemplate.OriginSourceTypeId = _originSourceTypeId;
				dlTemplate.OriginSourceAPITemplateId = _originSourceAPITemplateId;
				dlTemplate.OriginSourceFileTypeId = _originSourceFileTypeId;
				dlTemplate.OriginSourceServer = _originSourceServer;
				dlTemplate.OriginSourcePort = _originSourcePort;
				dlTemplate.OriginSourceUsername = _originSourceUsername;
				dlTemplate.OriginSourcePassword = _originSourcePassword;
				dlTemplate.OriginSourceDatabase = _originSourceDatabase;
				dlTemplate.OriginSourceFilePath = _originSourceFilePath;
				dlTemplate.OriginSourceFileName = _originSourceFileName;
				dlTemplate.IsFirstColumnContainHeader = _isFirstColumnContainHeader;
				dlTemplate.TargetSourceTypeId = _targetSourceTypeId;
				dlTemplate.TargetSourceAPITemplateId = _targetSourceAPITemplateId;
				dlTemplate.TargetSourceServer = _targetSourceServer;
				dlTemplate.TargetSourcePort = _targetSourcePort;
				dlTemplate.TargetSourceUsername = _targetSourceUsername;
				dlTemplate.TargetSourcePassword = _targetSourcePassword;
				dlTemplate.TargetSourceDatabase = _targetSourceDatabase;
				dlTemplate.IsScheduleEnabled = _isScheduleEnabled;
				dlTemplate.ScheduleType = _scheduleType;
				dlTemplate.FrequencyType = _frequencyType;
				dlTemplate.FrequencyRecurrsDailyEveryDay = _frequencyRecurrsDailyEveryDay;
				dlTemplate.FrequencyRecurrsWeeklyEveryWeek = _frequencyRecurrsWeeklyEveryWeek;
				dlTemplate.IsFrequencyRecurrsWeeklyOnMonday = _isFrequencyRecurrsWeeklyOnMonday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday = _isFrequencyRecurrsWeeklyOnTuesday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday = _isFrequencyRecurrsWeeklyOnWednesday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnThursday = _isFrequencyRecurrsWeeklyOnThursday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnFriday = _isFrequencyRecurrsWeeklyOnFriday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday = _isFrequencyRecurrsWeeklyOnSaturday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnSunday = _isFrequencyRecurrsWeeklyOnSunday;
				dlTemplate.FrequencyRecurrsMonthlyType = _frequencyRecurrsMonthlyType;
				dlTemplate.FrequencyRecurrsMonthtlyEveryMonth = _frequencyRecurrsMonthtlyEveryMonth;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth = _frequencyRecurrsMonthtlyDayOfMonth;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance = _frequencyRecurrsMonthtlyDayOfWeekOccurance;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek = _frequencyRecurrsMonthtlyDayOfWeek;
				dlTemplate.DailyFrequencyType = _dailyFrequencyType;
				dlTemplate.DailyFrequencyTime = _dailyFrequencyTime;
				dlTemplate.DailyFrequencyOccuranceType = _dailyFrequencyOccuranceType;
				dlTemplate.DailyFrequencyOccuranceEvery = _dailyFrequencyOccuranceEvery;
				dlTemplate.DailyFrequencyOccuranceStartTime = _dailyFrequencyOccuranceStartTime;
				dlTemplate.DailyFrequencyOccuranceEndTime = _dailyFrequencyOccuranceEndTime;
				dlTemplate.DurationStartDate = _durationStartDate;
				dlTemplate.IsDurationEndDateSpecified = _isDurationEndDateSpecified;
				dlTemplate.DurationEndDate = _durationEndDate;
				dlTemplate.IsActive = _isActive;
				dlTemplate.IsDelete = _isDelete;
				dlTemplate.EnteredBy = _enteredBy;
				dlTemplate.EnteredDate = _enteredDate;
				dlTemplate.UpdatedBy = _updatedBy;
				dlTemplate.UpdatedDate = _updatedDate;
				dlTemplate.Insert();
				CommitTransaction();
				
				_templateId = dlTemplate.TemplateId;
				_templateGUID = dlTemplate.TemplateGUID;
				_templateName = dlTemplate.TemplateName;
				_templateType = dlTemplate.TemplateType;
				_originSourceTypeId = dlTemplate.OriginSourceTypeId;
				_originSourceAPITemplateId = dlTemplate.OriginSourceAPITemplateId;
				_originSourceFileTypeId = dlTemplate.OriginSourceFileTypeId;
				_originSourceServer = dlTemplate.OriginSourceServer;
				_originSourcePort = dlTemplate.OriginSourcePort;
				_originSourceUsername = dlTemplate.OriginSourceUsername;
				_originSourcePassword = dlTemplate.OriginSourcePassword;
				_originSourceDatabase = dlTemplate.OriginSourceDatabase;
				_originSourceFilePath = dlTemplate.OriginSourceFilePath;
				_originSourceFileName = dlTemplate.OriginSourceFileName;
				_isFirstColumnContainHeader = dlTemplate.IsFirstColumnContainHeader;
				_targetSourceTypeId = dlTemplate.TargetSourceTypeId;
				_targetSourceAPITemplateId = dlTemplate.TargetSourceAPITemplateId;
				_targetSourceServer = dlTemplate.TargetSourceServer;
				_targetSourcePort = dlTemplate.TargetSourcePort;
				_targetSourceUsername = dlTemplate.TargetSourceUsername;
				_targetSourcePassword = dlTemplate.TargetSourcePassword;
				_targetSourceDatabase = dlTemplate.TargetSourceDatabase;
				_isScheduleEnabled = dlTemplate.IsScheduleEnabled;
				_scheduleType = dlTemplate.ScheduleType;
				_frequencyType = dlTemplate.FrequencyType;
				_frequencyRecurrsDailyEveryDay = dlTemplate.FrequencyRecurrsDailyEveryDay;
				_frequencyRecurrsWeeklyEveryWeek = dlTemplate.FrequencyRecurrsWeeklyEveryWeek;
				_isFrequencyRecurrsWeeklyOnMonday = dlTemplate.IsFrequencyRecurrsWeeklyOnMonday;
				_isFrequencyRecurrsWeeklyOnTuesday = dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday;
				_isFrequencyRecurrsWeeklyOnWednesday = dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday;
				_isFrequencyRecurrsWeeklyOnThursday = dlTemplate.IsFrequencyRecurrsWeeklyOnThursday;
				_isFrequencyRecurrsWeeklyOnFriday = dlTemplate.IsFrequencyRecurrsWeeklyOnFriday;
				_isFrequencyRecurrsWeeklyOnSaturday = dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday;
				_isFrequencyRecurrsWeeklyOnSunday = dlTemplate.IsFrequencyRecurrsWeeklyOnSunday;
				_frequencyRecurrsMonthlyType = dlTemplate.FrequencyRecurrsMonthlyType;
				_frequencyRecurrsMonthtlyEveryMonth = dlTemplate.FrequencyRecurrsMonthtlyEveryMonth;
				_frequencyRecurrsMonthtlyDayOfMonth = dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance;
				_frequencyRecurrsMonthtlyDayOfWeek = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek;
				_dailyFrequencyType = dlTemplate.DailyFrequencyType;
				_dailyFrequencyTime = dlTemplate.DailyFrequencyTime;
				_dailyFrequencyOccuranceType = dlTemplate.DailyFrequencyOccuranceType;
				_dailyFrequencyOccuranceEvery = dlTemplate.DailyFrequencyOccuranceEvery;
				_dailyFrequencyOccuranceStartTime = dlTemplate.DailyFrequencyOccuranceStartTime;
				_dailyFrequencyOccuranceEndTime = dlTemplate.DailyFrequencyOccuranceEndTime;
				_durationStartDate = dlTemplate.DurationStartDate;
				_isDurationEndDateSpecified = dlTemplate.IsDurationEndDateSpecified;
				_durationEndDate = dlTemplate.DurationEndDate;
				_isActive = dlTemplate.IsActive;
				_isDelete = dlTemplate.IsDelete;
				_enteredBy = dlTemplate.EnteredBy;
				_enteredDate = dlTemplate.EnteredDate;
				_updatedBy = dlTemplate.UpdatedBy;
				_updatedDate = dlTemplate.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLTemplate");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Template record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLTemplate
		///</parameters>
		public virtual void Update()
		{
			DLTemplate dlTemplate = new DLTemplate();
			RegisterDataObject(dlTemplate);
			BeginTransaction("updateBLTemplate");
			try
			{
				dlTemplate.TemplateId = _templateId;
				dlTemplate.TemplateGUID = _templateGUID;
				dlTemplate.TemplateName = _templateName;
				dlTemplate.TemplateType = _templateType;
				dlTemplate.OriginSourceTypeId = _originSourceTypeId;
				dlTemplate.OriginSourceAPITemplateId = _originSourceAPITemplateId;
				dlTemplate.OriginSourceFileTypeId = _originSourceFileTypeId;
				dlTemplate.OriginSourceServer = _originSourceServer;
				dlTemplate.OriginSourcePort = _originSourcePort;
				dlTemplate.OriginSourceUsername = _originSourceUsername;
				dlTemplate.OriginSourcePassword = _originSourcePassword;
				dlTemplate.OriginSourceDatabase = _originSourceDatabase;
				dlTemplate.OriginSourceFilePath = _originSourceFilePath;
				dlTemplate.OriginSourceFileName = _originSourceFileName;
				dlTemplate.IsFirstColumnContainHeader = _isFirstColumnContainHeader;
				dlTemplate.TargetSourceTypeId = _targetSourceTypeId;
				dlTemplate.TargetSourceAPITemplateId = _targetSourceAPITemplateId;
				dlTemplate.TargetSourceServer = _targetSourceServer;
				dlTemplate.TargetSourcePort = _targetSourcePort;
				dlTemplate.TargetSourceUsername = _targetSourceUsername;
				dlTemplate.TargetSourcePassword = _targetSourcePassword;
				dlTemplate.TargetSourceDatabase = _targetSourceDatabase;
				dlTemplate.IsScheduleEnabled = _isScheduleEnabled;
				dlTemplate.ScheduleType = _scheduleType;
				dlTemplate.FrequencyType = _frequencyType;
				dlTemplate.FrequencyRecurrsDailyEveryDay = _frequencyRecurrsDailyEveryDay;
				dlTemplate.FrequencyRecurrsWeeklyEveryWeek = _frequencyRecurrsWeeklyEveryWeek;
				dlTemplate.IsFrequencyRecurrsWeeklyOnMonday = _isFrequencyRecurrsWeeklyOnMonday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday = _isFrequencyRecurrsWeeklyOnTuesday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday = _isFrequencyRecurrsWeeklyOnWednesday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnThursday = _isFrequencyRecurrsWeeklyOnThursday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnFriday = _isFrequencyRecurrsWeeklyOnFriday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday = _isFrequencyRecurrsWeeklyOnSaturday;
				dlTemplate.IsFrequencyRecurrsWeeklyOnSunday = _isFrequencyRecurrsWeeklyOnSunday;
				dlTemplate.FrequencyRecurrsMonthlyType = _frequencyRecurrsMonthlyType;
				dlTemplate.FrequencyRecurrsMonthtlyEveryMonth = _frequencyRecurrsMonthtlyEveryMonth;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth = _frequencyRecurrsMonthtlyDayOfMonth;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance = _frequencyRecurrsMonthtlyDayOfWeekOccurance;
				dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek = _frequencyRecurrsMonthtlyDayOfWeek;
				dlTemplate.DailyFrequencyType = _dailyFrequencyType;
				dlTemplate.DailyFrequencyTime = _dailyFrequencyTime;
				dlTemplate.DailyFrequencyOccuranceType = _dailyFrequencyOccuranceType;
				dlTemplate.DailyFrequencyOccuranceEvery = _dailyFrequencyOccuranceEvery;
				dlTemplate.DailyFrequencyOccuranceStartTime = _dailyFrequencyOccuranceStartTime;
				dlTemplate.DailyFrequencyOccuranceEndTime = _dailyFrequencyOccuranceEndTime;
				dlTemplate.DurationStartDate = _durationStartDate;
				dlTemplate.IsDurationEndDateSpecified = _isDurationEndDateSpecified;
				dlTemplate.DurationEndDate = _durationEndDate;
				dlTemplate.IsActive = _isActive;
				dlTemplate.IsDelete = _isDelete;
				dlTemplate.EnteredBy = _enteredBy;
				dlTemplate.EnteredDate = _enteredDate;
				dlTemplate.UpdatedBy = _updatedBy;
				dlTemplate.UpdatedDate = _updatedDate;
				dlTemplate.Update();
				CommitTransaction();
				
				_templateId = dlTemplate.TemplateId;
				_templateGUID = dlTemplate.TemplateGUID;
				_templateName = dlTemplate.TemplateName;
				_templateType = dlTemplate.TemplateType;
				_originSourceTypeId = dlTemplate.OriginSourceTypeId;
				_originSourceAPITemplateId = dlTemplate.OriginSourceAPITemplateId;
				_originSourceFileTypeId = dlTemplate.OriginSourceFileTypeId;
				_originSourceServer = dlTemplate.OriginSourceServer;
				_originSourcePort = dlTemplate.OriginSourcePort;
				_originSourceUsername = dlTemplate.OriginSourceUsername;
				_originSourcePassword = dlTemplate.OriginSourcePassword;
				_originSourceDatabase = dlTemplate.OriginSourceDatabase;
				_originSourceFilePath = dlTemplate.OriginSourceFilePath;
				_originSourceFileName = dlTemplate.OriginSourceFileName;
				_isFirstColumnContainHeader = dlTemplate.IsFirstColumnContainHeader;
				_targetSourceTypeId = dlTemplate.TargetSourceTypeId;
				_targetSourceAPITemplateId = dlTemplate.TargetSourceAPITemplateId;
				_targetSourceServer = dlTemplate.TargetSourceServer;
				_targetSourcePort = dlTemplate.TargetSourcePort;
				_targetSourceUsername = dlTemplate.TargetSourceUsername;
				_targetSourcePassword = dlTemplate.TargetSourcePassword;
				_targetSourceDatabase = dlTemplate.TargetSourceDatabase;
				_isScheduleEnabled = dlTemplate.IsScheduleEnabled;
				_scheduleType = dlTemplate.ScheduleType;
				_frequencyType = dlTemplate.FrequencyType;
				_frequencyRecurrsDailyEveryDay = dlTemplate.FrequencyRecurrsDailyEveryDay;
				_frequencyRecurrsWeeklyEveryWeek = dlTemplate.FrequencyRecurrsWeeklyEveryWeek;
				_isFrequencyRecurrsWeeklyOnMonday = dlTemplate.IsFrequencyRecurrsWeeklyOnMonday;
				_isFrequencyRecurrsWeeklyOnTuesday = dlTemplate.IsFrequencyRecurrsWeeklyOnTuesday;
				_isFrequencyRecurrsWeeklyOnWednesday = dlTemplate.IsFrequencyRecurrsWeeklyOnWednesday;
				_isFrequencyRecurrsWeeklyOnThursday = dlTemplate.IsFrequencyRecurrsWeeklyOnThursday;
				_isFrequencyRecurrsWeeklyOnFriday = dlTemplate.IsFrequencyRecurrsWeeklyOnFriday;
				_isFrequencyRecurrsWeeklyOnSaturday = dlTemplate.IsFrequencyRecurrsWeeklyOnSaturday;
				_isFrequencyRecurrsWeeklyOnSunday = dlTemplate.IsFrequencyRecurrsWeeklyOnSunday;
				_frequencyRecurrsMonthlyType = dlTemplate.FrequencyRecurrsMonthlyType;
				_frequencyRecurrsMonthtlyEveryMonth = dlTemplate.FrequencyRecurrsMonthtlyEveryMonth;
				_frequencyRecurrsMonthtlyDayOfMonth = dlTemplate.FrequencyRecurrsMonthtlyDayOfMonth;
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeekOccurance;
				_frequencyRecurrsMonthtlyDayOfWeek = dlTemplate.FrequencyRecurrsMonthtlyDayOfWeek;
				_dailyFrequencyType = dlTemplate.DailyFrequencyType;
				_dailyFrequencyTime = dlTemplate.DailyFrequencyTime;
				_dailyFrequencyOccuranceType = dlTemplate.DailyFrequencyOccuranceType;
				_dailyFrequencyOccuranceEvery = dlTemplate.DailyFrequencyOccuranceEvery;
				_dailyFrequencyOccuranceStartTime = dlTemplate.DailyFrequencyOccuranceStartTime;
				_dailyFrequencyOccuranceEndTime = dlTemplate.DailyFrequencyOccuranceEndTime;
				_durationStartDate = dlTemplate.DurationStartDate;
				_isDurationEndDateSpecified = dlTemplate.IsDurationEndDateSpecified;
				_durationEndDate = dlTemplate.DurationEndDate;
				_isActive = dlTemplate.IsActive;
				_isDelete = dlTemplate.IsDelete;
				_enteredBy = dlTemplate.EnteredBy;
				_enteredDate = dlTemplate.EnteredDate;
				_updatedBy = dlTemplate.UpdatedBy;
				_updatedDate = dlTemplate.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLTemplate");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Template record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLTemplate dlTemplate = new DLTemplate();
			RegisterDataObject(dlTemplate);
			BeginTransaction("deleteBLTemplate");
			try
			{
				dlTemplate.TemplateId = _templateId;
				dlTemplate.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLTemplate");
				throw;
			}
		}
		
		///<Summary>
		///TemplateCollection
		///This method returns the collection of BLTemplate objects
		///</Summary>
		///<returns>
		///List[BLTemplate]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLTemplate> TemplateCollection()
		{
			try
			{
				IList<BLTemplate> blTemplateCollection = new List<BLTemplate>();
				IList<DLTemplate> dlTemplateCollection = DLTemplate.SelectAll();
			
				foreach(DLTemplate dlTemplate in dlTemplateCollection)
					blTemplateCollection.Add(new BLTemplate(dlTemplate));
			
				return blTemplateCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TemplateCollectionCount
		///This method returns the collection count of BLTemplate objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TemplateCollectionCount()
		{
			try
			{
				Int32 objCount = DLTemplate.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLTemplate>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLTemplate.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TemplateCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLTemplate objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blTemplateCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLTemplate> dlTemplateCollection = DLTemplate.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLTemplate resdlTemplate in dlTemplateCollection)
					blTemplateCollection.Add((T)(object)new BLTemplate(resdlTemplate));
			
				return blTemplateCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TemplateCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLTemplate objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLTemplate.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? TemplateId
		{
			get
			{
				 return _templateId;
			}
			set
			{
				_templateId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TemplateGUID
		{
			get
			{
				 return _templateGUID;
			}
			set
			{
				_templateGUID = value;
				_isDirty = true;
			}
		}
		
		public virtual string TemplateName
		{
			get
			{
				 return _templateName;
			}
			set
			{
				_templateName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TemplateType
		{
			get
			{
				 return _templateType;
			}
			set
			{
				_templateType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OriginSourceTypeId
		{
			get
			{
				 return _originSourceTypeId;
			}
			set
			{
				_originSourceTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OriginSourceAPITemplateId
		{
			get
			{
				 return _originSourceAPITemplateId;
			}
			set
			{
				_originSourceAPITemplateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OriginSourceFileTypeId
		{
			get
			{
				 return _originSourceFileTypeId;
			}
			set
			{
				_originSourceFileTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourceServer
		{
			get
			{
				 return _originSourceServer;
			}
			set
			{
				_originSourceServer = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourcePort
		{
			get
			{
				 return _originSourcePort;
			}
			set
			{
				_originSourcePort = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourceUsername
		{
			get
			{
				 return _originSourceUsername;
			}
			set
			{
				_originSourceUsername = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourcePassword
		{
			get
			{
				 return _originSourcePassword;
			}
			set
			{
				_originSourcePassword = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourceDatabase
		{
			get
			{
				 return _originSourceDatabase;
			}
			set
			{
				_originSourceDatabase = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourceFilePath
		{
			get
			{
				 return _originSourceFilePath;
			}
			set
			{
				_originSourceFilePath = value;
				_isDirty = true;
			}
		}
		
		public virtual string OriginSourceFileName
		{
			get
			{
				 return _originSourceFileName;
			}
			set
			{
				_originSourceFileName = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFirstColumnContainHeader
		{
			get
			{
				 return _isFirstColumnContainHeader;
			}
			set
			{
				_isFirstColumnContainHeader = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TargetSourceTypeId
		{
			get
			{
				 return _targetSourceTypeId;
			}
			set
			{
				_targetSourceTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TargetSourceAPITemplateId
		{
			get
			{
				 return _targetSourceAPITemplateId;
			}
			set
			{
				_targetSourceAPITemplateId = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetSourceServer
		{
			get
			{
				 return _targetSourceServer;
			}
			set
			{
				_targetSourceServer = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetSourcePort
		{
			get
			{
				 return _targetSourcePort;
			}
			set
			{
				_targetSourcePort = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetSourceUsername
		{
			get
			{
				 return _targetSourceUsername;
			}
			set
			{
				_targetSourceUsername = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetSourcePassword
		{
			get
			{
				 return _targetSourcePassword;
			}
			set
			{
				_targetSourcePassword = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetSourceDatabase
		{
			get
			{
				 return _targetSourceDatabase;
			}
			set
			{
				_targetSourceDatabase = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsScheduleEnabled
		{
			get
			{
				 return _isScheduleEnabled;
			}
			set
			{
				_isScheduleEnabled = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ScheduleType
		{
			get
			{
				 return _scheduleType;
			}
			set
			{
				_scheduleType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyType
		{
			get
			{
				 return _frequencyType;
			}
			set
			{
				_frequencyType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsDailyEveryDay
		{
			get
			{
				 return _frequencyRecurrsDailyEveryDay;
			}
			set
			{
				_frequencyRecurrsDailyEveryDay = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsWeeklyEveryWeek
		{
			get
			{
				 return _frequencyRecurrsWeeklyEveryWeek;
			}
			set
			{
				_frequencyRecurrsWeeklyEveryWeek = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnMonday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnMonday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnMonday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnTuesday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnTuesday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnTuesday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnWednesday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnWednesday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnWednesday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnThursday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnThursday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnThursday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnFriday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnFriday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnFriday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnSaturday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnSaturday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnSaturday = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsFrequencyRecurrsWeeklyOnSunday
		{
			get
			{
				 return _isFrequencyRecurrsWeeklyOnSunday;
			}
			set
			{
				_isFrequencyRecurrsWeeklyOnSunday = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsMonthlyType
		{
			get
			{
				 return _frequencyRecurrsMonthlyType;
			}
			set
			{
				_frequencyRecurrsMonthlyType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsMonthtlyEveryMonth
		{
			get
			{
				 return _frequencyRecurrsMonthtlyEveryMonth;
			}
			set
			{
				_frequencyRecurrsMonthtlyEveryMonth = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsMonthtlyDayOfMonth
		{
			get
			{
				 return _frequencyRecurrsMonthtlyDayOfMonth;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfMonth = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsMonthtlyDayOfWeekOccurance
		{
			get
			{
				 return _frequencyRecurrsMonthtlyDayOfWeekOccurance;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfWeekOccurance = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FrequencyRecurrsMonthtlyDayOfWeek
		{
			get
			{
				 return _frequencyRecurrsMonthtlyDayOfWeek;
			}
			set
			{
				_frequencyRecurrsMonthtlyDayOfWeek = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DailyFrequencyType
		{
			get
			{
				 return _dailyFrequencyType;
			}
			set
			{
				_dailyFrequencyType = value;
				_isDirty = true;
			}
		}
		
		public virtual TimeSpan? DailyFrequencyTime
		{
			get
			{
				 return _dailyFrequencyTime;
			}
			set
			{
				_dailyFrequencyTime = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DailyFrequencyOccuranceType
		{
			get
			{
				 return _dailyFrequencyOccuranceType;
			}
			set
			{
				_dailyFrequencyOccuranceType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DailyFrequencyOccuranceEvery
		{
			get
			{
				 return _dailyFrequencyOccuranceEvery;
			}
			set
			{
				_dailyFrequencyOccuranceEvery = value;
				_isDirty = true;
			}
		}
		
		public virtual TimeSpan? DailyFrequencyOccuranceStartTime
		{
			get
			{
				 return _dailyFrequencyOccuranceStartTime;
			}
			set
			{
				_dailyFrequencyOccuranceStartTime = value;
				_isDirty = true;
			}
		}
		
		public virtual TimeSpan? DailyFrequencyOccuranceEndTime
		{
			get
			{
				 return _dailyFrequencyOccuranceEndTime;
			}
			set
			{
				_dailyFrequencyOccuranceEndTime = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DurationStartDate
		{
			get
			{
				 return _durationStartDate;
			}
			set
			{
				_durationStartDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDurationEndDateSpecified
		{
			get
			{
				 return _isDurationEndDateSpecified;
			}
			set
			{
				_isDurationEndDateSpecified = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? DurationEndDate
		{
			get
			{
				 return _durationEndDate;
			}
			set
			{
				_durationEndDate = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
