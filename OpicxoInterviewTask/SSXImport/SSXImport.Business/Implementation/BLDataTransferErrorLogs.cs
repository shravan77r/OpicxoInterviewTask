/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLDataTransferErrorLogs.
	///</Summary>
	public partial class BLDataTransferErrorLogs : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _dataTransferLogsId;
		protected Int32? _dataTransferId;
		protected Int32? _dataTransferTableDetailId;
		protected DateTime? _logDate;
		protected string _recordUniqueId;
		protected string _errorMessage;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLDataTransferErrorLogs()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 dataTransferLogsId
		///</parameters>
		public BLDataTransferErrorLogs(Int32 dataTransferLogsId)
		{
			try
			{
				DLDataTransferErrorLogs dlDataTransferErrorLogs = DLDataTransferErrorLogs.SelectOne(dataTransferLogsId);
				_dataTransferLogsId = dlDataTransferErrorLogs.DataTransferLogsId;
				_dataTransferId = dlDataTransferErrorLogs.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferErrorLogs.DataTransferTableDetailId;
				_logDate = dlDataTransferErrorLogs.LogDate;
				_recordUniqueId = dlDataTransferErrorLogs.RecordUniqueId;
				_errorMessage = dlDataTransferErrorLogs.ErrorMessage;
				_isActive = dlDataTransferErrorLogs.IsActive;
				_isDelete = dlDataTransferErrorLogs.IsDelete;
				_enteredBy = dlDataTransferErrorLogs.EnteredBy;
				_enteredDate = dlDataTransferErrorLogs.EnteredDate;
				_updatedBy = dlDataTransferErrorLogs.UpdatedBy;
				_updatedDate = dlDataTransferErrorLogs.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLDataTransferErrorLogs
		///</parameters>
		protected internal BLDataTransferErrorLogs(DLDataTransferErrorLogs dlDataTransferErrorLogs)
		{
			try
			{
				_dataTransferLogsId = dlDataTransferErrorLogs.DataTransferLogsId;
				_dataTransferId = dlDataTransferErrorLogs.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferErrorLogs.DataTransferTableDetailId;
				_logDate = dlDataTransferErrorLogs.LogDate;
				_recordUniqueId = dlDataTransferErrorLogs.RecordUniqueId;
				_errorMessage = dlDataTransferErrorLogs.ErrorMessage;
				_isActive = dlDataTransferErrorLogs.IsActive;
				_isDelete = dlDataTransferErrorLogs.IsDelete;
				_enteredBy = dlDataTransferErrorLogs.EnteredBy;
				_enteredDate = dlDataTransferErrorLogs.EnteredDate;
				_updatedBy = dlDataTransferErrorLogs.UpdatedBy;
				_updatedDate = dlDataTransferErrorLogs.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new DataTransferErrorLogs record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLDataTransferErrorLogs dlDataTransferErrorLogs = new DLDataTransferErrorLogs();
			RegisterDataObject(dlDataTransferErrorLogs);
			BeginTransaction("savenewBLDataTransferErrorLogs");
			try
			{
				dlDataTransferErrorLogs.DataTransferId = _dataTransferId;
				dlDataTransferErrorLogs.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferErrorLogs.LogDate = _logDate;
				dlDataTransferErrorLogs.RecordUniqueId = _recordUniqueId;
				dlDataTransferErrorLogs.ErrorMessage = _errorMessage;
				dlDataTransferErrorLogs.IsActive = _isActive;
				dlDataTransferErrorLogs.IsDelete = _isDelete;
				dlDataTransferErrorLogs.EnteredBy = _enteredBy;
				dlDataTransferErrorLogs.EnteredDate = _enteredDate;
				dlDataTransferErrorLogs.UpdatedBy = _updatedBy;
				dlDataTransferErrorLogs.UpdatedDate = _updatedDate;
				dlDataTransferErrorLogs.Insert();
				CommitTransaction();
				
				_dataTransferLogsId = dlDataTransferErrorLogs.DataTransferLogsId;
				_dataTransferId = dlDataTransferErrorLogs.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferErrorLogs.DataTransferTableDetailId;
				_logDate = dlDataTransferErrorLogs.LogDate;
				_recordUniqueId = dlDataTransferErrorLogs.RecordUniqueId;
				_errorMessage = dlDataTransferErrorLogs.ErrorMessage;
				_isActive = dlDataTransferErrorLogs.IsActive;
				_isDelete = dlDataTransferErrorLogs.IsDelete;
				_enteredBy = dlDataTransferErrorLogs.EnteredBy;
				_enteredDate = dlDataTransferErrorLogs.EnteredDate;
				_updatedBy = dlDataTransferErrorLogs.UpdatedBy;
				_updatedDate = dlDataTransferErrorLogs.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLDataTransferErrorLogs");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one DataTransferErrorLogs record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLDataTransferErrorLogs
		///</parameters>
		public virtual void Update()
		{
			DLDataTransferErrorLogs dlDataTransferErrorLogs = new DLDataTransferErrorLogs();
			RegisterDataObject(dlDataTransferErrorLogs);
			BeginTransaction("updateBLDataTransferErrorLogs");
			try
			{
				dlDataTransferErrorLogs.DataTransferLogsId = _dataTransferLogsId;
				dlDataTransferErrorLogs.DataTransferId = _dataTransferId;
				dlDataTransferErrorLogs.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferErrorLogs.LogDate = _logDate;
				dlDataTransferErrorLogs.RecordUniqueId = _recordUniqueId;
				dlDataTransferErrorLogs.ErrorMessage = _errorMessage;
				dlDataTransferErrorLogs.IsActive = _isActive;
				dlDataTransferErrorLogs.IsDelete = _isDelete;
				dlDataTransferErrorLogs.EnteredBy = _enteredBy;
				dlDataTransferErrorLogs.EnteredDate = _enteredDate;
				dlDataTransferErrorLogs.UpdatedBy = _updatedBy;
				dlDataTransferErrorLogs.UpdatedDate = _updatedDate;
				dlDataTransferErrorLogs.Update();
				CommitTransaction();
				
				_dataTransferLogsId = dlDataTransferErrorLogs.DataTransferLogsId;
				_dataTransferId = dlDataTransferErrorLogs.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferErrorLogs.DataTransferTableDetailId;
				_logDate = dlDataTransferErrorLogs.LogDate;
				_recordUniqueId = dlDataTransferErrorLogs.RecordUniqueId;
				_errorMessage = dlDataTransferErrorLogs.ErrorMessage;
				_isActive = dlDataTransferErrorLogs.IsActive;
				_isDelete = dlDataTransferErrorLogs.IsDelete;
				_enteredBy = dlDataTransferErrorLogs.EnteredBy;
				_enteredDate = dlDataTransferErrorLogs.EnteredDate;
				_updatedBy = dlDataTransferErrorLogs.UpdatedBy;
				_updatedDate = dlDataTransferErrorLogs.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLDataTransferErrorLogs");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one DataTransferErrorLogs record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLDataTransferErrorLogs dlDataTransferErrorLogs = new DLDataTransferErrorLogs();
			RegisterDataObject(dlDataTransferErrorLogs);
			BeginTransaction("deleteBLDataTransferErrorLogs");
			try
			{
				dlDataTransferErrorLogs.DataTransferLogsId = _dataTransferLogsId;
				dlDataTransferErrorLogs.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLDataTransferErrorLogs");
				throw;
			}
		}
		
		///<Summary>
		///DataTransferErrorLogsCollection
		///This method returns the collection of BLDataTransferErrorLogs objects
		///</Summary>
		///<returns>
		///List[BLDataTransferErrorLogs]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLDataTransferErrorLogs> DataTransferErrorLogsCollection()
		{
			try
			{
				IList<BLDataTransferErrorLogs> blDataTransferErrorLogsCollection = new List<BLDataTransferErrorLogs>();
				IList<DLDataTransferErrorLogs> dlDataTransferErrorLogsCollection = DLDataTransferErrorLogs.SelectAll();
			
				foreach(DLDataTransferErrorLogs dlDataTransferErrorLogs in dlDataTransferErrorLogsCollection)
					blDataTransferErrorLogsCollection.Add(new BLDataTransferErrorLogs(dlDataTransferErrorLogs));
			
				return blDataTransferErrorLogsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferErrorLogsCollectionCount
		///This method returns the collection count of BLDataTransferErrorLogs objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DataTransferErrorLogsCollectionCount()
		{
			try
			{
				Int32 objCount = DLDataTransferErrorLogs.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLDataTransferErrorLogs>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLDataTransferErrorLogs.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferErrorLogsCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLDataTransferErrorLogs objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blDataTransferErrorLogsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLDataTransferErrorLogs> dlDataTransferErrorLogsCollection = DLDataTransferErrorLogs.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLDataTransferErrorLogs resdlDataTransferErrorLogs in dlDataTransferErrorLogsCollection)
					blDataTransferErrorLogsCollection.Add((T)(object)new BLDataTransferErrorLogs(resdlDataTransferErrorLogs));
			
				return blDataTransferErrorLogsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferErrorLogsCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLDataTransferErrorLogs objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLDataTransferErrorLogs.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DataTransferLogsId
		{
			get
			{
				 return _dataTransferLogsId;
			}
			set
			{
				_dataTransferLogsId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DataTransferId
		{
			get
			{
				 return _dataTransferId;
			}
			set
			{
				_dataTransferId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DataTransferTableDetailId
		{
			get
			{
				 return _dataTransferTableDetailId;
			}
			set
			{
				_dataTransferTableDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LogDate
		{
			get
			{
				 return _logDate;
			}
			set
			{
				_logDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string RecordUniqueId
		{
			get
			{
				 return _recordUniqueId;
			}
			set
			{
				_recordUniqueId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ErrorMessage
		{
			get
			{
				 return _errorMessage;
			}
			set
			{
				_errorMessage = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
