/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLDataTransferColumnDetail.
	///</Summary>
	public partial class BLDataTransferColumnDetail : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _dataTransferColumnDetailId;
		protected string _dataTransferColumnDetailGUID;
		protected Int32? _dataTransferId;
		protected Int32? _dataTransferTableDetailId;
		protected Int32? _templateColumnDetailId;
		protected string _sourceColumn;
		protected string _sourceDependentColumn;
		protected string _sourceColumnDataType;
		protected bool? _isUniqueColumn;
		protected string _targetColumn;
		protected string _targetColumnDataType;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLDataTransferColumnDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 dataTransferColumnDetailId
		///</parameters>
		public BLDataTransferColumnDetail(Int32 dataTransferColumnDetailId)
		{
			try
			{
				DLDataTransferColumnDetail dlDataTransferColumnDetail = DLDataTransferColumnDetail.SelectOne(dataTransferColumnDetailId);
				_dataTransferColumnDetailId = dlDataTransferColumnDetail.DataTransferColumnDetailId;
				_dataTransferColumnDetailGUID = dlDataTransferColumnDetail.DataTransferColumnDetailGUID;
				_dataTransferId = dlDataTransferColumnDetail.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferColumnDetail.DataTransferTableDetailId;
				_templateColumnDetailId = dlDataTransferColumnDetail.TemplateColumnDetailId;
				_sourceColumn = dlDataTransferColumnDetail.SourceColumn;
				_sourceDependentColumn = dlDataTransferColumnDetail.SourceDependentColumn;
				_sourceColumnDataType = dlDataTransferColumnDetail.SourceColumnDataType;
				_isUniqueColumn = dlDataTransferColumnDetail.IsUniqueColumn;
				_targetColumn = dlDataTransferColumnDetail.TargetColumn;
				_targetColumnDataType = dlDataTransferColumnDetail.TargetColumnDataType;
				_isActive = dlDataTransferColumnDetail.IsActive;
				_isDelete = dlDataTransferColumnDetail.IsDelete;
				_enteredBy = dlDataTransferColumnDetail.EnteredBy;
				_enteredDate = dlDataTransferColumnDetail.EnteredDate;
				_updatedBy = dlDataTransferColumnDetail.UpdatedBy;
				_updatedDate = dlDataTransferColumnDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DataTransferColumnDetailGUID
		///</parameters>
		public BLDataTransferColumnDetail(string dataTransferColumnDetailGUID)
		{
			try
			{
				DLDataTransferColumnDetail dlDataTransferColumnDetail = DLDataTransferColumnDetail.SelectOneByDataTransferColumnDetailGUID(dataTransferColumnDetailGUID);
				_dataTransferColumnDetailId = dlDataTransferColumnDetail.DataTransferColumnDetailId;
				_dataTransferColumnDetailGUID = dlDataTransferColumnDetail.DataTransferColumnDetailGUID;
				_dataTransferId = dlDataTransferColumnDetail.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferColumnDetail.DataTransferTableDetailId;
				_templateColumnDetailId = dlDataTransferColumnDetail.TemplateColumnDetailId;
				_sourceColumn = dlDataTransferColumnDetail.SourceColumn;
				_sourceDependentColumn = dlDataTransferColumnDetail.SourceDependentColumn;
				_sourceColumnDataType = dlDataTransferColumnDetail.SourceColumnDataType;
				_isUniqueColumn = dlDataTransferColumnDetail.IsUniqueColumn;
				_targetColumn = dlDataTransferColumnDetail.TargetColumn;
				_targetColumnDataType = dlDataTransferColumnDetail.TargetColumnDataType;
				_isActive = dlDataTransferColumnDetail.IsActive;
				_isDelete = dlDataTransferColumnDetail.IsDelete;
				_enteredBy = dlDataTransferColumnDetail.EnteredBy;
				_enteredDate = dlDataTransferColumnDetail.EnteredDate;
				_updatedBy = dlDataTransferColumnDetail.UpdatedBy;
				_updatedDate = dlDataTransferColumnDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLDataTransferColumnDetail
		///</parameters>
		protected internal BLDataTransferColumnDetail(DLDataTransferColumnDetail dlDataTransferColumnDetail)
		{
			try
			{
				_dataTransferColumnDetailId = dlDataTransferColumnDetail.DataTransferColumnDetailId;
				_dataTransferColumnDetailGUID = dlDataTransferColumnDetail.DataTransferColumnDetailGUID;
				_dataTransferId = dlDataTransferColumnDetail.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferColumnDetail.DataTransferTableDetailId;
				_templateColumnDetailId = dlDataTransferColumnDetail.TemplateColumnDetailId;
				_sourceColumn = dlDataTransferColumnDetail.SourceColumn;
				_sourceDependentColumn = dlDataTransferColumnDetail.SourceDependentColumn;
				_sourceColumnDataType = dlDataTransferColumnDetail.SourceColumnDataType;
				_isUniqueColumn = dlDataTransferColumnDetail.IsUniqueColumn;
				_targetColumn = dlDataTransferColumnDetail.TargetColumn;
				_targetColumnDataType = dlDataTransferColumnDetail.TargetColumnDataType;
				_isActive = dlDataTransferColumnDetail.IsActive;
				_isDelete = dlDataTransferColumnDetail.IsDelete;
				_enteredBy = dlDataTransferColumnDetail.EnteredBy;
				_enteredDate = dlDataTransferColumnDetail.EnteredDate;
				_updatedBy = dlDataTransferColumnDetail.UpdatedBy;
				_updatedDate = dlDataTransferColumnDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new DataTransferColumnDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLDataTransferColumnDetail dlDataTransferColumnDetail = new DLDataTransferColumnDetail();
			RegisterDataObject(dlDataTransferColumnDetail);
			BeginTransaction("savenewBLDataTransferColumnD609");
			try
			{
				dlDataTransferColumnDetail.DataTransferColumnDetailGUID = _dataTransferColumnDetailGUID;
				dlDataTransferColumnDetail.DataTransferId = _dataTransferId;
				dlDataTransferColumnDetail.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferColumnDetail.TemplateColumnDetailId = _templateColumnDetailId;
				dlDataTransferColumnDetail.SourceColumn = _sourceColumn;
				dlDataTransferColumnDetail.SourceDependentColumn = _sourceDependentColumn;
				dlDataTransferColumnDetail.SourceColumnDataType = _sourceColumnDataType;
				dlDataTransferColumnDetail.IsUniqueColumn = _isUniqueColumn;
				dlDataTransferColumnDetail.TargetColumn = _targetColumn;
				dlDataTransferColumnDetail.TargetColumnDataType = _targetColumnDataType;
				dlDataTransferColumnDetail.IsActive = _isActive;
				dlDataTransferColumnDetail.IsDelete = _isDelete;
				dlDataTransferColumnDetail.EnteredBy = _enteredBy;
				dlDataTransferColumnDetail.EnteredDate = _enteredDate;
				dlDataTransferColumnDetail.UpdatedBy = _updatedBy;
				dlDataTransferColumnDetail.UpdatedDate = _updatedDate;
				dlDataTransferColumnDetail.Insert();
				CommitTransaction();
				
				_dataTransferColumnDetailId = dlDataTransferColumnDetail.DataTransferColumnDetailId;
				_dataTransferColumnDetailGUID = dlDataTransferColumnDetail.DataTransferColumnDetailGUID;
				_dataTransferId = dlDataTransferColumnDetail.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferColumnDetail.DataTransferTableDetailId;
				_templateColumnDetailId = dlDataTransferColumnDetail.TemplateColumnDetailId;
				_sourceColumn = dlDataTransferColumnDetail.SourceColumn;
				_sourceDependentColumn = dlDataTransferColumnDetail.SourceDependentColumn;
				_sourceColumnDataType = dlDataTransferColumnDetail.SourceColumnDataType;
				_isUniqueColumn = dlDataTransferColumnDetail.IsUniqueColumn;
				_targetColumn = dlDataTransferColumnDetail.TargetColumn;
				_targetColumnDataType = dlDataTransferColumnDetail.TargetColumnDataType;
				_isActive = dlDataTransferColumnDetail.IsActive;
				_isDelete = dlDataTransferColumnDetail.IsDelete;
				_enteredBy = dlDataTransferColumnDetail.EnteredBy;
				_enteredDate = dlDataTransferColumnDetail.EnteredDate;
				_updatedBy = dlDataTransferColumnDetail.UpdatedBy;
				_updatedDate = dlDataTransferColumnDetail.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLDataTransferColumnD609");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one DataTransferColumnDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLDataTransferColumnDetail
		///</parameters>
		public virtual void Update()
		{
			DLDataTransferColumnDetail dlDataTransferColumnDetail = new DLDataTransferColumnDetail();
			RegisterDataObject(dlDataTransferColumnDetail);
			BeginTransaction("updateBLDataTransferColumnDetail");
			try
			{
				dlDataTransferColumnDetail.DataTransferColumnDetailId = _dataTransferColumnDetailId;
				dlDataTransferColumnDetail.DataTransferColumnDetailGUID = _dataTransferColumnDetailGUID;
				dlDataTransferColumnDetail.DataTransferId = _dataTransferId;
				dlDataTransferColumnDetail.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferColumnDetail.TemplateColumnDetailId = _templateColumnDetailId;
				dlDataTransferColumnDetail.SourceColumn = _sourceColumn;
				dlDataTransferColumnDetail.SourceDependentColumn = _sourceDependentColumn;
				dlDataTransferColumnDetail.SourceColumnDataType = _sourceColumnDataType;
				dlDataTransferColumnDetail.IsUniqueColumn = _isUniqueColumn;
				dlDataTransferColumnDetail.TargetColumn = _targetColumn;
				dlDataTransferColumnDetail.TargetColumnDataType = _targetColumnDataType;
				dlDataTransferColumnDetail.IsActive = _isActive;
				dlDataTransferColumnDetail.IsDelete = _isDelete;
				dlDataTransferColumnDetail.EnteredBy = _enteredBy;
				dlDataTransferColumnDetail.EnteredDate = _enteredDate;
				dlDataTransferColumnDetail.UpdatedBy = _updatedBy;
				dlDataTransferColumnDetail.UpdatedDate = _updatedDate;
				dlDataTransferColumnDetail.Update();
				CommitTransaction();
				
				_dataTransferColumnDetailId = dlDataTransferColumnDetail.DataTransferColumnDetailId;
				_dataTransferColumnDetailGUID = dlDataTransferColumnDetail.DataTransferColumnDetailGUID;
				_dataTransferId = dlDataTransferColumnDetail.DataTransferId;
				_dataTransferTableDetailId = dlDataTransferColumnDetail.DataTransferTableDetailId;
				_templateColumnDetailId = dlDataTransferColumnDetail.TemplateColumnDetailId;
				_sourceColumn = dlDataTransferColumnDetail.SourceColumn;
				_sourceDependentColumn = dlDataTransferColumnDetail.SourceDependentColumn;
				_sourceColumnDataType = dlDataTransferColumnDetail.SourceColumnDataType;
				_isUniqueColumn = dlDataTransferColumnDetail.IsUniqueColumn;
				_targetColumn = dlDataTransferColumnDetail.TargetColumn;
				_targetColumnDataType = dlDataTransferColumnDetail.TargetColumnDataType;
				_isActive = dlDataTransferColumnDetail.IsActive;
				_isDelete = dlDataTransferColumnDetail.IsDelete;
				_enteredBy = dlDataTransferColumnDetail.EnteredBy;
				_enteredDate = dlDataTransferColumnDetail.EnteredDate;
				_updatedBy = dlDataTransferColumnDetail.UpdatedBy;
				_updatedDate = dlDataTransferColumnDetail.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLDataTransferColumnDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one DataTransferColumnDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLDataTransferColumnDetail dlDataTransferColumnDetail = new DLDataTransferColumnDetail();
			RegisterDataObject(dlDataTransferColumnDetail);
			BeginTransaction("deleteBLDataTransferColumnDetail");
			try
			{
				dlDataTransferColumnDetail.DataTransferColumnDetailId = _dataTransferColumnDetailId;
				dlDataTransferColumnDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLDataTransferColumnDetail");
				throw;
			}
		}
		
		///<Summary>
		///DataTransferColumnDetailCollection
		///This method returns the collection of BLDataTransferColumnDetail objects
		///</Summary>
		///<returns>
		///List[BLDataTransferColumnDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLDataTransferColumnDetail> DataTransferColumnDetailCollection()
		{
			try
			{
				IList<BLDataTransferColumnDetail> blDataTransferColumnDetailCollection = new List<BLDataTransferColumnDetail>();
				IList<DLDataTransferColumnDetail> dlDataTransferColumnDetailCollection = DLDataTransferColumnDetail.SelectAll();
			
				foreach(DLDataTransferColumnDetail dlDataTransferColumnDetail in dlDataTransferColumnDetailCollection)
					blDataTransferColumnDetailCollection.Add(new BLDataTransferColumnDetail(dlDataTransferColumnDetail));
			
				return blDataTransferColumnDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferColumnDetailCollectionCount
		///This method returns the collection count of BLDataTransferColumnDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DataTransferColumnDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DLDataTransferColumnDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLDataTransferColumnDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLDataTransferColumnDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferColumnDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLDataTransferColumnDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blDataTransferColumnDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLDataTransferColumnDetail> dlDataTransferColumnDetailCollection = DLDataTransferColumnDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLDataTransferColumnDetail resdlDataTransferColumnDetail in dlDataTransferColumnDetailCollection)
					blDataTransferColumnDetailCollection.Add((T)(object)new BLDataTransferColumnDetail(resdlDataTransferColumnDetail));
			
				return blDataTransferColumnDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferColumnDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLDataTransferColumnDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLDataTransferColumnDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DataTransferColumnDetailId
		{
			get
			{
				 return _dataTransferColumnDetailId;
			}
			set
			{
				_dataTransferColumnDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DataTransferColumnDetailGUID
		{
			get
			{
				 return _dataTransferColumnDetailGUID;
			}
			set
			{
				_dataTransferColumnDetailGUID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DataTransferId
		{
			get
			{
				 return _dataTransferId;
			}
			set
			{
				_dataTransferId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DataTransferTableDetailId
		{
			get
			{
				 return _dataTransferTableDetailId;
			}
			set
			{
				_dataTransferTableDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TemplateColumnDetailId
		{
			get
			{
				 return _templateColumnDetailId;
			}
			set
			{
				_templateColumnDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SourceColumn
		{
			get
			{
				 return _sourceColumn;
			}
			set
			{
				_sourceColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SourceDependentColumn
		{
			get
			{
				 return _sourceDependentColumn;
			}
			set
			{
				_sourceDependentColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual string SourceColumnDataType
		{
			get
			{
				 return _sourceColumnDataType;
			}
			set
			{
				_sourceColumnDataType = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsUniqueColumn
		{
			get
			{
				 return _isUniqueColumn;
			}
			set
			{
				_isUniqueColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetColumn
		{
			get
			{
				 return _targetColumn;
			}
			set
			{
				_targetColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetColumnDataType
		{
			get
			{
				 return _targetColumnDataType;
			}
			set
			{
				_targetColumnDataType = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
