/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLDataTransferTableDetail.
	///</Summary>
	public partial class BLDataTransferTableDetail : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _dataTransferTableDetailId;
		protected string _dataTransferTableDetailIdGUID;
		protected Int32? _dataTransferId;
		protected Int32? _templateTableDetailId;
		protected string _sourceTable;
		protected string _targetTable;
		protected Int32? _executionOrder;
		protected bool? _isDeduplicateData;
		protected Int64? _totalRecords;
		protected Int64? _successRecords;
		protected Int64? _errorRecords;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLDataTransferTableDetail()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 dataTransferTableDetailId
		///</parameters>
		public BLDataTransferTableDetail(Int32 dataTransferTableDetailId)
		{
			try
			{
				DLDataTransferTableDetail dlDataTransferTableDetail = DLDataTransferTableDetail.SelectOne(dataTransferTableDetailId);
				_dataTransferTableDetailId = dlDataTransferTableDetail.DataTransferTableDetailId;
				_dataTransferTableDetailIdGUID = dlDataTransferTableDetail.DataTransferTableDetailIdGUID;
				_dataTransferId = dlDataTransferTableDetail.DataTransferId;
				_templateTableDetailId = dlDataTransferTableDetail.TemplateTableDetailId;
				_sourceTable = dlDataTransferTableDetail.SourceTable;
				_targetTable = dlDataTransferTableDetail.TargetTable;
				_executionOrder = dlDataTransferTableDetail.ExecutionOrder;
				_isDeduplicateData = dlDataTransferTableDetail.IsDeduplicateData;
				_totalRecords = dlDataTransferTableDetail.TotalRecords;
				_successRecords = dlDataTransferTableDetail.SuccessRecords;
				_errorRecords = dlDataTransferTableDetail.ErrorRecords;
				_isActive = dlDataTransferTableDetail.IsActive;
				_isDelete = dlDataTransferTableDetail.IsDelete;
				_enteredBy = dlDataTransferTableDetail.EnteredBy;
				_enteredDate = dlDataTransferTableDetail.EnteredDate;
				_updatedBy = dlDataTransferTableDetail.UpdatedBy;
				_updatedDate = dlDataTransferTableDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DataTransferTableDetailIdGUID
		///</parameters>
		public BLDataTransferTableDetail(string dataTransferTableDetailIdGUID)
		{
			try
			{
				DLDataTransferTableDetail dlDataTransferTableDetail = DLDataTransferTableDetail.SelectOneByDataTransferTableDetailIdGUID(dataTransferTableDetailIdGUID);
				_dataTransferTableDetailId = dlDataTransferTableDetail.DataTransferTableDetailId;
				_dataTransferTableDetailIdGUID = dlDataTransferTableDetail.DataTransferTableDetailIdGUID;
				_dataTransferId = dlDataTransferTableDetail.DataTransferId;
				_templateTableDetailId = dlDataTransferTableDetail.TemplateTableDetailId;
				_sourceTable = dlDataTransferTableDetail.SourceTable;
				_targetTable = dlDataTransferTableDetail.TargetTable;
				_executionOrder = dlDataTransferTableDetail.ExecutionOrder;
				_isDeduplicateData = dlDataTransferTableDetail.IsDeduplicateData;
				_totalRecords = dlDataTransferTableDetail.TotalRecords;
				_successRecords = dlDataTransferTableDetail.SuccessRecords;
				_errorRecords = dlDataTransferTableDetail.ErrorRecords;
				_isActive = dlDataTransferTableDetail.IsActive;
				_isDelete = dlDataTransferTableDetail.IsDelete;
				_enteredBy = dlDataTransferTableDetail.EnteredBy;
				_enteredDate = dlDataTransferTableDetail.EnteredDate;
				_updatedBy = dlDataTransferTableDetail.UpdatedBy;
				_updatedDate = dlDataTransferTableDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLDataTransferTableDetail
		///</parameters>
		protected internal BLDataTransferTableDetail(DLDataTransferTableDetail dlDataTransferTableDetail)
		{
			try
			{
				_dataTransferTableDetailId = dlDataTransferTableDetail.DataTransferTableDetailId;
				_dataTransferTableDetailIdGUID = dlDataTransferTableDetail.DataTransferTableDetailIdGUID;
				_dataTransferId = dlDataTransferTableDetail.DataTransferId;
				_templateTableDetailId = dlDataTransferTableDetail.TemplateTableDetailId;
				_sourceTable = dlDataTransferTableDetail.SourceTable;
				_targetTable = dlDataTransferTableDetail.TargetTable;
				_executionOrder = dlDataTransferTableDetail.ExecutionOrder;
				_isDeduplicateData = dlDataTransferTableDetail.IsDeduplicateData;
				_totalRecords = dlDataTransferTableDetail.TotalRecords;
				_successRecords = dlDataTransferTableDetail.SuccessRecords;
				_errorRecords = dlDataTransferTableDetail.ErrorRecords;
				_isActive = dlDataTransferTableDetail.IsActive;
				_isDelete = dlDataTransferTableDetail.IsDelete;
				_enteredBy = dlDataTransferTableDetail.EnteredBy;
				_enteredDate = dlDataTransferTableDetail.EnteredDate;
				_updatedBy = dlDataTransferTableDetail.UpdatedBy;
				_updatedDate = dlDataTransferTableDetail.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new DataTransferTableDetail record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLDataTransferTableDetail dlDataTransferTableDetail = new DLDataTransferTableDetail();
			RegisterDataObject(dlDataTransferTableDetail);
			BeginTransaction("savenewBLDataTransferTableDetail");
			try
			{
				dlDataTransferTableDetail.DataTransferTableDetailIdGUID = _dataTransferTableDetailIdGUID;
				dlDataTransferTableDetail.DataTransferId = _dataTransferId;
				dlDataTransferTableDetail.TemplateTableDetailId = _templateTableDetailId;
				dlDataTransferTableDetail.SourceTable = _sourceTable;
				dlDataTransferTableDetail.TargetTable = _targetTable;
				dlDataTransferTableDetail.ExecutionOrder = _executionOrder;
				dlDataTransferTableDetail.IsDeduplicateData = _isDeduplicateData;
				dlDataTransferTableDetail.TotalRecords = _totalRecords;
				dlDataTransferTableDetail.SuccessRecords = _successRecords;
				dlDataTransferTableDetail.ErrorRecords = _errorRecords;
				dlDataTransferTableDetail.IsActive = _isActive;
				dlDataTransferTableDetail.IsDelete = _isDelete;
				dlDataTransferTableDetail.EnteredBy = _enteredBy;
				dlDataTransferTableDetail.EnteredDate = _enteredDate;
				dlDataTransferTableDetail.UpdatedBy = _updatedBy;
				dlDataTransferTableDetail.UpdatedDate = _updatedDate;
				dlDataTransferTableDetail.Insert();
				CommitTransaction();
				
				_dataTransferTableDetailId = dlDataTransferTableDetail.DataTransferTableDetailId;
				_dataTransferTableDetailIdGUID = dlDataTransferTableDetail.DataTransferTableDetailIdGUID;
				_dataTransferId = dlDataTransferTableDetail.DataTransferId;
				_templateTableDetailId = dlDataTransferTableDetail.TemplateTableDetailId;
				_sourceTable = dlDataTransferTableDetail.SourceTable;
				_targetTable = dlDataTransferTableDetail.TargetTable;
				_executionOrder = dlDataTransferTableDetail.ExecutionOrder;
				_isDeduplicateData = dlDataTransferTableDetail.IsDeduplicateData;
				_totalRecords = dlDataTransferTableDetail.TotalRecords;
				_successRecords = dlDataTransferTableDetail.SuccessRecords;
				_errorRecords = dlDataTransferTableDetail.ErrorRecords;
				_isActive = dlDataTransferTableDetail.IsActive;
				_isDelete = dlDataTransferTableDetail.IsDelete;
				_enteredBy = dlDataTransferTableDetail.EnteredBy;
				_enteredDate = dlDataTransferTableDetail.EnteredDate;
				_updatedBy = dlDataTransferTableDetail.UpdatedBy;
				_updatedDate = dlDataTransferTableDetail.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLDataTransferTableDetail");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one DataTransferTableDetail record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLDataTransferTableDetail
		///</parameters>
		public virtual void Update()
		{
			DLDataTransferTableDetail dlDataTransferTableDetail = new DLDataTransferTableDetail();
			RegisterDataObject(dlDataTransferTableDetail);
			BeginTransaction("updateBLDataTransferTableDetail");
			try
			{
				dlDataTransferTableDetail.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferTableDetail.DataTransferTableDetailIdGUID = _dataTransferTableDetailIdGUID;
				dlDataTransferTableDetail.DataTransferId = _dataTransferId;
				dlDataTransferTableDetail.TemplateTableDetailId = _templateTableDetailId;
				dlDataTransferTableDetail.SourceTable = _sourceTable;
				dlDataTransferTableDetail.TargetTable = _targetTable;
				dlDataTransferTableDetail.ExecutionOrder = _executionOrder;
				dlDataTransferTableDetail.IsDeduplicateData = _isDeduplicateData;
				dlDataTransferTableDetail.TotalRecords = _totalRecords;
				dlDataTransferTableDetail.SuccessRecords = _successRecords;
				dlDataTransferTableDetail.ErrorRecords = _errorRecords;
				dlDataTransferTableDetail.IsActive = _isActive;
				dlDataTransferTableDetail.IsDelete = _isDelete;
				dlDataTransferTableDetail.EnteredBy = _enteredBy;
				dlDataTransferTableDetail.EnteredDate = _enteredDate;
				dlDataTransferTableDetail.UpdatedBy = _updatedBy;
				dlDataTransferTableDetail.UpdatedDate = _updatedDate;
				dlDataTransferTableDetail.Update();
				CommitTransaction();
				
				_dataTransferTableDetailId = dlDataTransferTableDetail.DataTransferTableDetailId;
				_dataTransferTableDetailIdGUID = dlDataTransferTableDetail.DataTransferTableDetailIdGUID;
				_dataTransferId = dlDataTransferTableDetail.DataTransferId;
				_templateTableDetailId = dlDataTransferTableDetail.TemplateTableDetailId;
				_sourceTable = dlDataTransferTableDetail.SourceTable;
				_targetTable = dlDataTransferTableDetail.TargetTable;
				_executionOrder = dlDataTransferTableDetail.ExecutionOrder;
				_isDeduplicateData = dlDataTransferTableDetail.IsDeduplicateData;
				_totalRecords = dlDataTransferTableDetail.TotalRecords;
				_successRecords = dlDataTransferTableDetail.SuccessRecords;
				_errorRecords = dlDataTransferTableDetail.ErrorRecords;
				_isActive = dlDataTransferTableDetail.IsActive;
				_isDelete = dlDataTransferTableDetail.IsDelete;
				_enteredBy = dlDataTransferTableDetail.EnteredBy;
				_enteredDate = dlDataTransferTableDetail.EnteredDate;
				_updatedBy = dlDataTransferTableDetail.UpdatedBy;
				_updatedDate = dlDataTransferTableDetail.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLDataTransferTableDetail");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one DataTransferTableDetail record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLDataTransferTableDetail dlDataTransferTableDetail = new DLDataTransferTableDetail();
			RegisterDataObject(dlDataTransferTableDetail);
			BeginTransaction("deleteBLDataTransferTableDetail");
			try
			{
				dlDataTransferTableDetail.DataTransferTableDetailId = _dataTransferTableDetailId;
				dlDataTransferTableDetail.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLDataTransferTableDetail");
				throw;
			}
		}
		
		///<Summary>
		///DataTransferTableDetailCollection
		///This method returns the collection of BLDataTransferTableDetail objects
		///</Summary>
		///<returns>
		///List[BLDataTransferTableDetail]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLDataTransferTableDetail> DataTransferTableDetailCollection()
		{
			try
			{
				IList<BLDataTransferTableDetail> blDataTransferTableDetailCollection = new List<BLDataTransferTableDetail>();
				IList<DLDataTransferTableDetail> dlDataTransferTableDetailCollection = DLDataTransferTableDetail.SelectAll();
			
				foreach(DLDataTransferTableDetail dlDataTransferTableDetail in dlDataTransferTableDetailCollection)
					blDataTransferTableDetailCollection.Add(new BLDataTransferTableDetail(dlDataTransferTableDetail));
			
				return blDataTransferTableDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferTableDetailCollectionCount
		///This method returns the collection count of BLDataTransferTableDetail objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DataTransferTableDetailCollectionCount()
		{
			try
			{
				Int32 objCount = DLDataTransferTableDetail.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLDataTransferTableDetail>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLDataTransferTableDetail.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferTableDetailCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLDataTransferTableDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blDataTransferTableDetailCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLDataTransferTableDetail> dlDataTransferTableDetailCollection = DLDataTransferTableDetail.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLDataTransferTableDetail resdlDataTransferTableDetail in dlDataTransferTableDetailCollection)
					blDataTransferTableDetailCollection.Add((T)(object)new BLDataTransferTableDetail(resdlDataTransferTableDetail));
			
				return blDataTransferTableDetailCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DataTransferTableDetailCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLDataTransferTableDetail objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLDataTransferTableDetail.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? DataTransferTableDetailId
		{
			get
			{
				 return _dataTransferTableDetailId;
			}
			set
			{
				_dataTransferTableDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DataTransferTableDetailIdGUID
		{
			get
			{
				 return _dataTransferTableDetailIdGUID;
			}
			set
			{
				_dataTransferTableDetailIdGUID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DataTransferId
		{
			get
			{
				 return _dataTransferId;
			}
			set
			{
				_dataTransferId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TemplateTableDetailId
		{
			get
			{
				 return _templateTableDetailId;
			}
			set
			{
				_templateTableDetailId = value;
				_isDirty = true;
			}
		}
		
		public virtual string SourceTable
		{
			get
			{
				 return _sourceTable;
			}
			set
			{
				_sourceTable = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetTable
		{
			get
			{
				 return _targetTable;
			}
			set
			{
				_targetTable = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ExecutionOrder
		{
			get
			{
				 return _executionOrder;
			}
			set
			{
				_executionOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDeduplicateData
		{
			get
			{
				 return _isDeduplicateData;
			}
			set
			{
				_isDeduplicateData = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? TotalRecords
		{
			get
			{
				 return _totalRecords;
			}
			set
			{
				_totalRecords = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? SuccessRecords
		{
			get
			{
				 return _successRecords;
			}
			set
			{
				_successRecords = value;
				_isDirty = true;
			}
		}
		
		public virtual Int64? ErrorRecords
		{
			get
			{
				 return _errorRecords;
			}
			set
			{
				_errorRecords = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
