/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLAPIInputParameter.
	///</Summary>
	public partial class BLAPIInputParameter : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _inputParameterId;
		protected string _inputParameterGUID;
		protected Int32? _aPIId;
		protected Int32? _inputParameterTypeId;
		protected string _keyColumn;
		protected string _valueColumn;
		protected Int32? _bodyType;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLAPIInputParameter()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 inputParameterId
		///</parameters>
		public BLAPIInputParameter(Int32 inputParameterId)
		{
			try
			{
				DLAPIInputParameter dlAPIInputParameter = DLAPIInputParameter.SelectOne(inputParameterId);
				_inputParameterId = dlAPIInputParameter.InputParameterId;
				_inputParameterGUID = dlAPIInputParameter.InputParameterGUID;
				_aPIId = dlAPIInputParameter.APIId;
				_inputParameterTypeId = dlAPIInputParameter.InputParameterTypeId;
				_keyColumn = dlAPIInputParameter.KeyColumn;
				_valueColumn = dlAPIInputParameter.ValueColumn;
				_bodyType = dlAPIInputParameter.BodyType;
				_isActive = dlAPIInputParameter.IsActive;
				_isDelete = dlAPIInputParameter.IsDelete;
				_enteredBy = dlAPIInputParameter.EnteredBy;
				_enteredDate = dlAPIInputParameter.EnteredDate;
				_updatedBy = dlAPIInputParameter.UpdatedBy;
				_updatedDate = dlAPIInputParameter.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///InputParameterGUID
		///</parameters>
		public BLAPIInputParameter(string inputParameterGUID)
		{
			try
			{
				DLAPIInputParameter dlAPIInputParameter = DLAPIInputParameter.SelectOneByInputParameterGUID(inputParameterGUID);
				_inputParameterId = dlAPIInputParameter.InputParameterId;
				_inputParameterGUID = dlAPIInputParameter.InputParameterGUID;
				_aPIId = dlAPIInputParameter.APIId;
				_inputParameterTypeId = dlAPIInputParameter.InputParameterTypeId;
				_keyColumn = dlAPIInputParameter.KeyColumn;
				_valueColumn = dlAPIInputParameter.ValueColumn;
				_bodyType = dlAPIInputParameter.BodyType;
				_isActive = dlAPIInputParameter.IsActive;
				_isDelete = dlAPIInputParameter.IsDelete;
				_enteredBy = dlAPIInputParameter.EnteredBy;
				_enteredDate = dlAPIInputParameter.EnteredDate;
				_updatedBy = dlAPIInputParameter.UpdatedBy;
				_updatedDate = dlAPIInputParameter.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLAPIInputParameter
		///</parameters>
		protected internal BLAPIInputParameter(DLAPIInputParameter dlAPIInputParameter)
		{
			try
			{
				_inputParameterId = dlAPIInputParameter.InputParameterId;
				_inputParameterGUID = dlAPIInputParameter.InputParameterGUID;
				_aPIId = dlAPIInputParameter.APIId;
				_inputParameterTypeId = dlAPIInputParameter.InputParameterTypeId;
				_keyColumn = dlAPIInputParameter.KeyColumn;
				_valueColumn = dlAPIInputParameter.ValueColumn;
				_bodyType = dlAPIInputParameter.BodyType;
				_isActive = dlAPIInputParameter.IsActive;
				_isDelete = dlAPIInputParameter.IsDelete;
				_enteredBy = dlAPIInputParameter.EnteredBy;
				_enteredDate = dlAPIInputParameter.EnteredDate;
				_updatedBy = dlAPIInputParameter.UpdatedBy;
				_updatedDate = dlAPIInputParameter.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new APIInputParameter record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLAPIInputParameter dlAPIInputParameter = new DLAPIInputParameter();
			RegisterDataObject(dlAPIInputParameter);
			BeginTransaction("savenewBLAPIInputParameter");
			try
			{
				dlAPIInputParameter.InputParameterGUID = _inputParameterGUID;
				dlAPIInputParameter.APIId = _aPIId;
				dlAPIInputParameter.InputParameterTypeId = _inputParameterTypeId;
				dlAPIInputParameter.KeyColumn = _keyColumn;
				dlAPIInputParameter.ValueColumn = _valueColumn;
				dlAPIInputParameter.BodyType = _bodyType;
				dlAPIInputParameter.IsActive = _isActive;
				dlAPIInputParameter.IsDelete = _isDelete;
				dlAPIInputParameter.EnteredBy = _enteredBy;
				dlAPIInputParameter.EnteredDate = _enteredDate;
				dlAPIInputParameter.UpdatedBy = _updatedBy;
				dlAPIInputParameter.UpdatedDate = _updatedDate;
				dlAPIInputParameter.Insert();
				CommitTransaction();
				
				_inputParameterId = dlAPIInputParameter.InputParameterId;
				_inputParameterGUID = dlAPIInputParameter.InputParameterGUID;
				_aPIId = dlAPIInputParameter.APIId;
				_inputParameterTypeId = dlAPIInputParameter.InputParameterTypeId;
				_keyColumn = dlAPIInputParameter.KeyColumn;
				_valueColumn = dlAPIInputParameter.ValueColumn;
				_bodyType = dlAPIInputParameter.BodyType;
				_isActive = dlAPIInputParameter.IsActive;
				_isDelete = dlAPIInputParameter.IsDelete;
				_enteredBy = dlAPIInputParameter.EnteredBy;
				_enteredDate = dlAPIInputParameter.EnteredDate;
				_updatedBy = dlAPIInputParameter.UpdatedBy;
				_updatedDate = dlAPIInputParameter.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLAPIInputParameter");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one APIInputParameter record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLAPIInputParameter
		///</parameters>
		public virtual void Update()
		{
			DLAPIInputParameter dlAPIInputParameter = new DLAPIInputParameter();
			RegisterDataObject(dlAPIInputParameter);
			BeginTransaction("updateBLAPIInputParameter");
			try
			{
				dlAPIInputParameter.InputParameterId = _inputParameterId;
				dlAPIInputParameter.InputParameterGUID = _inputParameterGUID;
				dlAPIInputParameter.APIId = _aPIId;
				dlAPIInputParameter.InputParameterTypeId = _inputParameterTypeId;
				dlAPIInputParameter.KeyColumn = _keyColumn;
				dlAPIInputParameter.ValueColumn = _valueColumn;
				dlAPIInputParameter.BodyType = _bodyType;
				dlAPIInputParameter.IsActive = _isActive;
				dlAPIInputParameter.IsDelete = _isDelete;
				dlAPIInputParameter.EnteredBy = _enteredBy;
				dlAPIInputParameter.EnteredDate = _enteredDate;
				dlAPIInputParameter.UpdatedBy = _updatedBy;
				dlAPIInputParameter.UpdatedDate = _updatedDate;
				dlAPIInputParameter.Update();
				CommitTransaction();
				
				_inputParameterId = dlAPIInputParameter.InputParameterId;
				_inputParameterGUID = dlAPIInputParameter.InputParameterGUID;
				_aPIId = dlAPIInputParameter.APIId;
				_inputParameterTypeId = dlAPIInputParameter.InputParameterTypeId;
				_keyColumn = dlAPIInputParameter.KeyColumn;
				_valueColumn = dlAPIInputParameter.ValueColumn;
				_bodyType = dlAPIInputParameter.BodyType;
				_isActive = dlAPIInputParameter.IsActive;
				_isDelete = dlAPIInputParameter.IsDelete;
				_enteredBy = dlAPIInputParameter.EnteredBy;
				_enteredDate = dlAPIInputParameter.EnteredDate;
				_updatedBy = dlAPIInputParameter.UpdatedBy;
				_updatedDate = dlAPIInputParameter.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLAPIInputParameter");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one APIInputParameter record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLAPIInputParameter dlAPIInputParameter = new DLAPIInputParameter();
			RegisterDataObject(dlAPIInputParameter);
			BeginTransaction("deleteBLAPIInputParameter");
			try
			{
				dlAPIInputParameter.InputParameterId = _inputParameterId;
				dlAPIInputParameter.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLAPIInputParameter");
				throw;
			}
		}
		
		///<Summary>
		///APIInputParameterCollection
		///This method returns the collection of BLAPIInputParameter objects
		///</Summary>
		///<returns>
		///List[BLAPIInputParameter]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLAPIInputParameter> APIInputParameterCollection()
		{
			try
			{
				IList<BLAPIInputParameter> blAPIInputParameterCollection = new List<BLAPIInputParameter>();
				IList<DLAPIInputParameter> dlAPIInputParameterCollection = DLAPIInputParameter.SelectAll();
			
				foreach(DLAPIInputParameter dlAPIInputParameter in dlAPIInputParameterCollection)
					blAPIInputParameterCollection.Add(new BLAPIInputParameter(dlAPIInputParameter));
			
				return blAPIInputParameterCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///APIInputParameterCollectionCount
		///This method returns the collection count of BLAPIInputParameter objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 APIInputParameterCollectionCount()
		{
			try
			{
				Int32 objCount = DLAPIInputParameter.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLAPIInputParameter>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLAPIInputParameter.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///APIInputParameterCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLAPIInputParameter objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blAPIInputParameterCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLAPIInputParameter> dlAPIInputParameterCollection = DLAPIInputParameter.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLAPIInputParameter resdlAPIInputParameter in dlAPIInputParameterCollection)
					blAPIInputParameterCollection.Add((T)(object)new BLAPIInputParameter(resdlAPIInputParameter));
			
				return blAPIInputParameterCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///APIInputParameterCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLAPIInputParameter objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLAPIInputParameter.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? InputParameterId
		{
			get
			{
				 return _inputParameterId;
			}
			set
			{
				_inputParameterId = value;
				_isDirty = true;
			}
		}
		
		public virtual string InputParameterGUID
		{
			get
			{
				 return _inputParameterGUID;
			}
			set
			{
				_inputParameterGUID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? APIId
		{
			get
			{
				 return _aPIId;
			}
			set
			{
				_aPIId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InputParameterTypeId
		{
			get
			{
				 return _inputParameterTypeId;
			}
			set
			{
				_inputParameterTypeId = value;
				_isDirty = true;
			}
		}
		
		public virtual string KeyColumn
		{
			get
			{
				 return _keyColumn;
			}
			set
			{
				_keyColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual string ValueColumn
		{
			get
			{
				 return _valueColumn;
			}
			set
			{
				_valueColumn = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BodyType
		{
			get
			{
				 return _bodyType;
			}
			set
			{
				_bodyType = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
