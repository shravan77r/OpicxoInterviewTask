/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.5
** This class was generated on 27/08/2021 16:39:34
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using SSXImport.Data;
using SSXImport.Data.Interfaces;
using SSXImport.Business.Interfaces;

namespace SSXImport.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BLApi.
	///</Summary>
	public partial class BLApi : SSXImport_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _aPIId;
		protected string _apiguid;
		protected string _name;
		protected string _aPIEndPoint;
		protected Int32? _type;
		protected string _description;
		protected Int32? _authorizationType;
		protected string _authorizationUsername;
		protected string _authorizationPassword;
		protected Int32? _authorizationOathAPIId;
		protected string _authorizationTokenName;
		protected Int32? _inputParameterType;
		protected Int32? _bodyParameterType;
		protected string _outPutParameterJson;
		protected bool? _isActive;
		protected bool? _isDelete;
		protected Int32? _enteredBy;
		protected DateTime? _enteredDate;
		protected Int32? _updatedBy;
		protected DateTime? _updatedDate;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BLApi()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 aPIId
		///</parameters>
		public BLApi(Int32 aPIId)
		{
			try
			{
				DLApi dlApi = DLApi.SelectOne(aPIId);
				_aPIId = dlApi.APIId;
				_apiguid = dlApi.Apiguid;
				_name = dlApi.Name;
				_aPIEndPoint = dlApi.APIEndPoint;
				_type = dlApi.Type;
				_description = dlApi.Description;
				_authorizationType = dlApi.AuthorizationType;
				_authorizationUsername = dlApi.AuthorizationUsername;
				_authorizationPassword = dlApi.AuthorizationPassword;
				_authorizationOathAPIId = dlApi.AuthorizationOathAPIId;
				_authorizationTokenName = dlApi.AuthorizationTokenName;
				_inputParameterType = dlApi.InputParameterType;
				_bodyParameterType = dlApi.BodyParameterType;
				_outPutParameterJson = dlApi.OutPutParameterJson;
				_isActive = dlApi.IsActive;
				_isDelete = dlApi.IsDelete;
				_enteredBy = dlApi.EnteredBy;
				_enteredDate = dlApi.EnteredDate;
				_updatedBy = dlApi.UpdatedBy;
				_updatedDate = dlApi.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///APIGUID
		///</parameters>
		public BLApi(string apiguid)
		{
			try
			{
				DLApi dlApi = DLApi.SelectOneByApiguid(apiguid);
				_aPIId = dlApi.APIId;
				_apiguid = dlApi.Apiguid;
				_name = dlApi.Name;
				_aPIEndPoint = dlApi.APIEndPoint;
				_type = dlApi.Type;
				_description = dlApi.Description;
				_authorizationType = dlApi.AuthorizationType;
				_authorizationUsername = dlApi.AuthorizationUsername;
				_authorizationPassword = dlApi.AuthorizationPassword;
				_authorizationOathAPIId = dlApi.AuthorizationOathAPIId;
				_authorizationTokenName = dlApi.AuthorizationTokenName;
				_inputParameterType = dlApi.InputParameterType;
				_bodyParameterType = dlApi.BodyParameterType;
				_outPutParameterJson = dlApi.OutPutParameterJson;
				_isActive = dlApi.IsActive;
				_isDelete = dlApi.IsDelete;
				_enteredBy = dlApi.EnteredBy;
				_enteredDate = dlApi.EnteredDate;
				_updatedBy = dlApi.UpdatedBy;
				_updatedDate = dlApi.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DLApi
		///</parameters>
		protected internal BLApi(DLApi dlApi)
		{
			try
			{
				_aPIId = dlApi.APIId;
				_apiguid = dlApi.Apiguid;
				_name = dlApi.Name;
				_aPIEndPoint = dlApi.APIEndPoint;
				_type = dlApi.Type;
				_description = dlApi.Description;
				_authorizationType = dlApi.AuthorizationType;
				_authorizationUsername = dlApi.AuthorizationUsername;
				_authorizationPassword = dlApi.AuthorizationPassword;
				_authorizationOathAPIId = dlApi.AuthorizationOathAPIId;
				_authorizationTokenName = dlApi.AuthorizationTokenName;
				_inputParameterType = dlApi.InputParameterType;
				_bodyParameterType = dlApi.BodyParameterType;
				_outPutParameterJson = dlApi.OutPutParameterJson;
				_isActive = dlApi.IsActive;
				_isDelete = dlApi.IsDelete;
				_enteredBy = dlApi.EnteredBy;
				_enteredDate = dlApi.EnteredDate;
				_updatedBy = dlApi.UpdatedBy;
				_updatedDate = dlApi.UpdatedDate;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Api record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DLApi dlApi = new DLApi();
			RegisterDataObject(dlApi);
			BeginTransaction("savenewBLApi");
			try
			{
				dlApi.Apiguid = _apiguid;
				dlApi.Name = _name;
				dlApi.APIEndPoint = _aPIEndPoint;
				dlApi.Type = _type;
				dlApi.Description = _description;
				dlApi.AuthorizationType = _authorizationType;
				dlApi.AuthorizationUsername = _authorizationUsername;
				dlApi.AuthorizationPassword = _authorizationPassword;
				dlApi.AuthorizationOathAPIId = _authorizationOathAPIId;
				dlApi.AuthorizationTokenName = _authorizationTokenName;
				dlApi.InputParameterType = _inputParameterType;
				dlApi.BodyParameterType = _bodyParameterType;
				dlApi.OutPutParameterJson = _outPutParameterJson;
				dlApi.IsActive = _isActive;
				dlApi.IsDelete = _isDelete;
				dlApi.EnteredBy = _enteredBy;
				dlApi.EnteredDate = _enteredDate;
				dlApi.UpdatedBy = _updatedBy;
				dlApi.UpdatedDate = _updatedDate;
				dlApi.Insert();
				CommitTransaction();
				
				_aPIId = dlApi.APIId;
				_apiguid = dlApi.Apiguid;
				_name = dlApi.Name;
				_aPIEndPoint = dlApi.APIEndPoint;
				_type = dlApi.Type;
				_description = dlApi.Description;
				_authorizationType = dlApi.AuthorizationType;
				_authorizationUsername = dlApi.AuthorizationUsername;
				_authorizationPassword = dlApi.AuthorizationPassword;
				_authorizationOathAPIId = dlApi.AuthorizationOathAPIId;
				_authorizationTokenName = dlApi.AuthorizationTokenName;
				_inputParameterType = dlApi.InputParameterType;
				_bodyParameterType = dlApi.BodyParameterType;
				_outPutParameterJson = dlApi.OutPutParameterJson;
				_isActive = dlApi.IsActive;
				_isDelete = dlApi.IsDelete;
				_enteredBy = dlApi.EnteredBy;
				_enteredDate = dlApi.EnteredDate;
				_updatedBy = dlApi.UpdatedBy;
				_updatedDate = dlApi.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBLApi");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Api record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BLApi
		///</parameters>
		public virtual void Update()
		{
			DLApi dlApi = new DLApi();
			RegisterDataObject(dlApi);
			BeginTransaction("updateBLApi");
			try
			{
				dlApi.APIId = _aPIId;
				dlApi.Apiguid = _apiguid;
				dlApi.Name = _name;
				dlApi.APIEndPoint = _aPIEndPoint;
				dlApi.Type = _type;
				dlApi.Description = _description;
				dlApi.AuthorizationType = _authorizationType;
				dlApi.AuthorizationUsername = _authorizationUsername;
				dlApi.AuthorizationPassword = _authorizationPassword;
				dlApi.AuthorizationOathAPIId = _authorizationOathAPIId;
				dlApi.AuthorizationTokenName = _authorizationTokenName;
				dlApi.InputParameterType = _inputParameterType;
				dlApi.BodyParameterType = _bodyParameterType;
				dlApi.OutPutParameterJson = _outPutParameterJson;
				dlApi.IsActive = _isActive;
				dlApi.IsDelete = _isDelete;
				dlApi.EnteredBy = _enteredBy;
				dlApi.EnteredDate = _enteredDate;
				dlApi.UpdatedBy = _updatedBy;
				dlApi.UpdatedDate = _updatedDate;
				dlApi.Update();
				CommitTransaction();
				
				_aPIId = dlApi.APIId;
				_apiguid = dlApi.Apiguid;
				_name = dlApi.Name;
				_aPIEndPoint = dlApi.APIEndPoint;
				_type = dlApi.Type;
				_description = dlApi.Description;
				_authorizationType = dlApi.AuthorizationType;
				_authorizationUsername = dlApi.AuthorizationUsername;
				_authorizationPassword = dlApi.AuthorizationPassword;
				_authorizationOathAPIId = dlApi.AuthorizationOathAPIId;
				_authorizationTokenName = dlApi.AuthorizationTokenName;
				_inputParameterType = dlApi.InputParameterType;
				_bodyParameterType = dlApi.BodyParameterType;
				_outPutParameterJson = dlApi.OutPutParameterJson;
				_isActive = dlApi.IsActive;
				_isDelete = dlApi.IsDelete;
				_enteredBy = dlApi.EnteredBy;
				_enteredDate = dlApi.EnteredDate;
				_updatedBy = dlApi.UpdatedBy;
				_updatedDate = dlApi.UpdatedDate;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBLApi");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Api record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DLApi dlApi = new DLApi();
			RegisterDataObject(dlApi);
			BeginTransaction("deleteBLApi");
			try
			{
				dlApi.APIId = _aPIId;
				dlApi.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBLApi");
				throw;
			}
		}
		
		///<Summary>
		///ApiCollection
		///This method returns the collection of BLApi objects
		///</Summary>
		///<returns>
		///List[BLApi]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BLApi> ApiCollection()
		{
			try
			{
				IList<BLApi> blApiCollection = new List<BLApi>();
				IList<DLApi> dlApiCollection = DLApi.SelectAll();
			
				foreach(DLApi dlApi in dlApiCollection)
					blApiCollection.Add(new BLApi(dlApi));
			
				return blApiCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApiCollectionCount
		///This method returns the collection count of BLApi objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ApiCollectionCount()
		{
			try
			{
				Int32 objCount = DLApi.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BLApi>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DLApi.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApiCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BLApi objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> blApiCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DLApi> dlApiCollection = DLApi.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DLApi resdlApi in dlApiCollection)
					blApiCollection.Add((T)(object)new BLApi(resdlApi));
			
				return blApiCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ApiCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BLApi objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DLApi.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? APIId
		{
			get
			{
				 return _aPIId;
			}
			set
			{
				_aPIId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Apiguid
		{
			get
			{
				 return _apiguid;
			}
			set
			{
				_apiguid = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual string APIEndPoint
		{
			get
			{
				 return _aPIEndPoint;
			}
			set
			{
				_aPIEndPoint = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Type
		{
			get
			{
				 return _type;
			}
			set
			{
				_type = value;
				_isDirty = true;
			}
		}
		
		public virtual string Description
		{
			get
			{
				 return _description;
			}
			set
			{
				_description = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AuthorizationType
		{
			get
			{
				 return _authorizationType;
			}
			set
			{
				_authorizationType = value;
				_isDirty = true;
			}
		}
		
		public virtual string AuthorizationUsername
		{
			get
			{
				 return _authorizationUsername;
			}
			set
			{
				_authorizationUsername = value;
				_isDirty = true;
			}
		}
		
		public virtual string AuthorizationPassword
		{
			get
			{
				 return _authorizationPassword;
			}
			set
			{
				_authorizationPassword = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? AuthorizationOathAPIId
		{
			get
			{
				 return _authorizationOathAPIId;
			}
			set
			{
				_authorizationOathAPIId = value;
				_isDirty = true;
			}
		}
		
		public virtual string AuthorizationTokenName
		{
			get
			{
				 return _authorizationTokenName;
			}
			set
			{
				_authorizationTokenName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? InputParameterType
		{
			get
			{
				 return _inputParameterType;
			}
			set
			{
				_inputParameterType = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? BodyParameterType
		{
			get
			{
				 return _bodyParameterType;
			}
			set
			{
				_bodyParameterType = value;
				_isDirty = true;
			}
		}
		
		public virtual string OutPutParameterJson
		{
			get
			{
				 return _outPutParameterJson;
			}
			set
			{
				_outPutParameterJson = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsActive
		{
			get
			{
				 return _isActive;
			}
			set
			{
				_isActive = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsDelete
		{
			get
			{
				 return _isDelete;
			}
			set
			{
				_isDelete = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EnteredBy
		{
			get
			{
				 return _enteredBy;
			}
			set
			{
				_enteredBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? EnteredDate
		{
			get
			{
				 return _enteredDate;
			}
			set
			{
				_enteredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? UpdatedBy
		{
			get
			{
				 return _updatedBy;
			}
			set
			{
				_updatedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? UpdatedDate
		{
			get
			{
				 return _updatedDate;
			}
			set
			{
				_updatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
